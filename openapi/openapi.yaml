openapi: '3.0.3'


info:
  title: sh api
  version: n0.1
servers:
  - url: '{api_domain}/api/{api_version}'
    variables:
      api_domain:
        default: https://dev.simple-home.liis.su
        enum:
          - https://dev.simple-home.liis.su  # Development server
          - https://simple-home.liis.su  # Production server
          - http://localhost:8080  # Local server
      api_version:
        default: v2
        enum:
          - v2
          - v1

security:
  - BearerAuth: []

paths:
  /argus/object/{argus_object_id}:
    $ref: './routes/security_systems/RetrieveArgusObject.yaml'

  /argus/object/operation:
    $ref: './routes/security_systems/SendArgusObjectOperation.yaml'

  /admin/buildings/{id}/set_apartments:
    $ref: './routes/buildings/AdminSetBuildingApartments.yaml'

  /admin/buildings/{id}:
    $ref: './routes/buildings/AdminBuilding.yaml'

  /admin/buildings:
    $ref: './routes/buildings/Buildings.yaml'
    
  /support/create_report:
    $ref: './routes/customers_support/SupportRequestCreate.yaml'

  /support/list_subjects:
    $ref: './routes/customers_support/GetSupportedSubjects.yaml'

  /get_weather:
    $ref: './routes/weather/GetWeather.yaml'

  /images:
    $ref: './routes/images/UserCreateImage.yaml'

  /images/intermediate/hash/{hash}:
    $ref: './routes/images/UserDownloadImageByIntermediateToken.yaml'

  /images/{image_id}:
    $ref: './routes/images/UserDeleteImage.yaml'

  /admin/images:
    $ref: './routes/images/AdminImages.yaml'

  /admin/images/templates:
    $ref: './routes/images/AdminImagesTemplates.yaml'

  /admin/images/{image_id}:
    $ref: './routes/images/AdminImage.yaml'

  /admin/resources:
    $ref: './routes/images/AdminFileserviceResorces.yaml'

  /admin/images/hash/{hash}:
    $ref: './routes/images/AdminDownloadImage.yaml'

  /admin/images/create_dir:
    $ref: './routes/images/AdminCreateFileserviceDir.yaml'

  /admin/images/search:
    $ref: './routes/images/AdminFileserviceSearch.yaml'

  /admin/notifications:
    $ref: './routes/notifications/AdminNotifications.yaml'

  /admin/notifications/{notification_id}:
    $ref: './routes/notifications/AdminNotification.yaml'

  /notifications:
    $ref: './routes/notifications/UserNotifications.yaml'

  /notifications/read_all_notifications:
    $ref: './routes/notifications/ReadAllNotifications.yaml'

  /notifications/count_unread:
    $ref: './routes/notifications/CountUnread.yaml'

  /notifications/{notification_id}:
    $ref: './routes/notifications/UserNotification.yaml'

  /admin/automations:
    $ref: ./routes/automations/AdminAutomationsEndpoints.yaml

  /admin/automations/{automation_id}:
    $ref: ./routes/automations/AdminAutomationEndpoints.yaml
    
  /admin/automations/clone/{automation_id}:
    $ref: ./routes/automations/AdminCloneAutomationsEndpoints.yaml
  
  /automations/{automation_id}:
    $ref: ./routes/automations/UserAutomationEndpoints.yaml

  /automation_triggers:
    $ref: ./routes/automation_triggers/UserAutomationsTriggers.yaml

  /automation_triggers/{automation_trigger_id}:
    $ref: ./routes/automation_triggers/UserAutomationTriggers.yaml
  
  /admin/automation_triggers:
    $ref: ./routes/automation_triggers/AdminAutomationsTriggers.yaml

  /admin/automation_triggers/{automation_trigger_id}:
    $ref: ./routes/automation_triggers/AdminAutomationTriggers.yaml

  /automation_actions/{automation_action_id}:
    $ref: ./routes/automation_actions/UserAutomationAction.yaml

  /automation_actions:
    $ref: ./routes/automation_actions/UserAutomationsActions.yaml

  /admin/automation_actions/{automation_action_id}:
    $ref: ./routes/automation_actions/AdminAutomationAction.yaml

  /admin/automation_actions:
    $ref: ./routes/automation_actions/AdminAutomationsActions.yaml

  /admin/apartment_templates:
    $ref: ./routes/apartment_templates/AdminApartmentTemplates.yaml

  /admin/apartment_templates/import_apartments:
    $ref: ./routes/apartment_templates/AdminImportApartments.yaml

  /admin/apartment_templates/{apartment_template_id}:
    $ref: ./routes/apartment_templates/AdminApartmentTemplate.yaml

  /admin/apartment_templates/controller/{apartment_template_id}:
    $ref: ./routes/apartment_templates/AdminApartmentTemplateController.yaml

  /admin/apartment_templates/apartment/{apartment_template_id}:
    $ref: ./routes/apartment_templates/AdminApartmentTemplateApartment.yaml

  /admin/room_templates:
    $ref: ./routes/room_templates/AdminRoomTemplates.yaml

  /admin/room_templates/{room_template_id}:
    $ref: ./routes/room_templates/AdminRoomTemplate.yaml

  /admin/driver_templates:
    $ref: ./routes/driver_templates/AdminDriverTemplates.yaml

  /admin/driver_templates/{driver_template_id}:
    $ref: ./routes/driver_templates/AdminDriverTemplate.yaml

  /admin/device_templates:
    $ref: ./routes/device_templates/AdminDeviceTemplates.yaml

  /admin/device_templates/{device_template_id}:
    $ref: ./routes/device_templates/AdminDeviceTemplate.yaml

  /admin/capability_templates:
    $ref: ./routes/capability_templates/AdminCapabilityTemplates.yaml

  /admin/capability_templates/{capability_template_id}:
    $ref: ./routes/capability_templates/AdminCapabilityTemplate.yaml

  /admin/scenario_templates:
    $ref: ./routes/scenario_templates/AdminScenarioTemplates.yaml

  /admin/scenario_templates/{scenario_template_id}:
    $ref: ./routes/scenario_templates/AdminScenarioTemplate.yaml

  /admin/action_templates:
    $ref: ./routes/actions_templates/AdminActionTemplates.yaml

  /admin/action_templates/{action_template_id}:
    $ref: ./routes/actions_templates/AdminActionTemplate.yaml


  /admin/residences/{id}:
    put:
      operationId: update
      description: Обновляет объект резиденции
      tags:
        - residences
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: './schemas/residences/UpdateResidence.yaml'
      responses:
        '201':
          description: Успешное получение данных
          content:
            application/json:
              schema:
                $ref: './schemas/residences/RetrieveResidence.yaml'

        '404':
          description: Резиденция не найдена
          # content:
            # 'Not Found!'

        '400':
          description: Изображение не найдено
          # Image Id {image_id} Does Not Exists!

    get:
      operationId: retrieve
      description: Получение резиденции по id
      tags:
        - residences
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Объект резиденции
          content:
            application/json:
              schema:
                $ref: './schemas/residences/RetrieveResidence.yaml'

    delete:
      operationId: delete
      description: Удаляет резиденцию по id
      tags:
        - residences
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Резиденция успешно удалена
        '404':
          description: Резиденция не существует

  /admin/residences:
    get:
      operationId: list
      description: Получение списка доступных резиденций
      tags:
        - residences
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: string
        - in: query
          name: max_results
          required: false
          schema:
            type: string
        - in: query
          name: sort
          required: false
          schema:
            type: string
        - in: query
          name: search
          required: false
          schema:
            type: string

        - in: query
          name: create_dt_after
          required: false
          schema:
            type: string

        - in: query
          name: updated_dt_after
          required: false
          schema:
            type: string

      responses:
        '200':
          description: Успешное получение списка резиденций
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/residences/RetrieveResidence.yaml'

    post:
      operationId: create
      description: Создание резиденции
      tags:
        - residences
      requestBody:
        content:
          application/json:
            schema:
              $ref: './schemas/residences/CreateResidence.yaml'
      responses:
        '201':
          description: Резиденция успешно создана
          content:
            application/json:
              schema:
                $ref: './schemas/residences/RetrieveResidence.yaml'

    delete:
      operationId: delete_multiple
      description: Множественное удаление резиденций по их id
      tags:
        - residences
      requestBody:
        content:
          application/json:
            schema:
              type: object 
              properties:
                id:
                  type: string
                  description: список с id резиденций, которые требуется удалить
                  example: "[1,2,3,4]"
      responses:
        '200':
          description: Успешное удаление резиденций
          content:
            application/json:
              schema:
                type: array
                items:
                    $ref: './schemas/residences/RetrieveResidence.yaml'

  /admin/residences_and_apartments:
    get:
      operationId: get_residences_and_apartments
      description: WARNING! GOVNOROUTE.
                   Этот роут возвращает все резиденты доступные пользователю с апартаментами.
                   Логика выдачи апартаментов - тайна за семью печатями
      tags:
        - residences
      responses:
        '200':
          description: Успешное получение резиденций с их апартаментами
          content:
            application/json:
              schema:
                $ref: "./schemas/residences/RetrieveResidenceWithApartments.yaml"

# этого метода не должно быть. Удалить его
# фронтенд получает эти данные, чтобы считать кол-во удаляемых объектов и выводить в модалке
# запрос нагруженный и дерьмовый. Я бы его переписал :/
  /admin/residences/get_list_related_entities:
    get:
      operationId: get_list_related_entities
      description: Получение доступных резиденций и 
      tags:
        - residences
      parameters:
        - in: path
          schema:
            type: integer
          name: residence_id
          required: true
        
      responses:
        '400':
          description: Id Must Be An Integer!
        
        '200':
          description: Успешное получение связанных с резиденцией данных
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: './schemas/residences/RetrieveResidence.yaml'
                properties:
                  controller_ids:
                    type: array
                    items:
                      type: integer
                  driver_ids:
                    type: array
                    items:
                      type: integer
                  room_ids:
                    type: array
                    items:
                      type: integer
                  scenario_ids:
                    type: array
                    items:
                      type: integer
                  device_ids:
                    type: array
                    items:
                      type: integer

  /admin/residences/{residence_id}/buildings:
    get:
      operationId: retrieve_buildings
      description: Отдаёт список строений принадлежащих резиденции.
                   Доступно инженеру и выше
      tags:
        - residences
      parameters:
        - in: path
          name: residence_id
          required: true
          description: id резиденции
          schema:
            type: integer
      responses:
        '200':
          description: Успешно возвращает список зданий резиденции
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/buildings/BuildingSchema.yaml'

  # доступы до резиденций
  /admin/residences_accesses/{pk}:
    post:
      operationId: multiple_create
      description: Множественное добавление доступов до резиденции
      tags:
        - residences
      parameters:
        - in: path
          name: pk
          description: id пользователя, у которого обновляется доступ
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: './schemas/residences/ChangeResidenceAccess.yaml'

      responses:
        "201":
          description: перечисленные доступы успешно добавленны


    delete:
      operationId: multiple_delete
      description: Множественное удаление доступов до резиденции
      tags:
        - residences
      parameters:
        - in: path
          name: pk
          description: id пользователя, у которого обновляется доступ
          required: true
          schema:
            type: integer
      responses:
        "201":
          description: перечисленные доступы успешно удалены

    # роуты на интеграторов нужно перенести
  /admin/integrator:
    post:
      operationId: create
      description: создаёт нового интегратора. Метод доступен с роли суперпользователя
      tags:
        - integrators
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
               - title
              properties:
                title:
                  type: string
                  description: Название интегратора
      responses:
        '200':
          description: Интегратор успешно создан
          content:
            application/json:
              schema:
                $ref: './schemas/integrators/RetrieveIntegrator.yaml'

    get:
      operationId: get_integrator
      description: Получить интегратора по произвольному полю.
                   Метод доступен с ролью engeneer и выше
      tags:
        - integrators
      parameters:
        - in: query
          name: id
          required: false
          schema:
            type: integer
        - in: query
          name: title
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Успешное получение интегратора
          content:
            application/json:
              schema:
                $ref: './schemas/integrators/RetrieveIntegrator.yaml'

    delete:
      operationId: delete_integrator
      description: метод доступен только для суперпользователя
      tags:
        - integrators
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: id удаляемого интегратора
      responses:
        '200':
          description: Успешное удаление интегратора
          content:
            application/json:
              schema:
                $ref: './schemas/integrators/RetrieveIntegrator.yaml'
      

  /admin/integrators:
    get:
      operationId: get_integrators_paginated
      description: получить список всех интеграторов
      tags:
        - integrators
      parameters:
        - $ref: "./schemas/core/filters/pagination_query.yaml#/PageQuery"
        - $ref: "./schemas/core/filters/pagination_query.yaml#/MaxResultsQuery"
        - $ref: "./schemas/core/filters/pagination_query.yaml#/GetAllQuery"
      responses:
        "200":
          description: список интеграторов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/integrators/RetrieveIntegrator.yaml'

    patch:
      description: Обновление полей интегратора. Метод доступен только суперпользователям
      tags:
        - integrators
      parameters:
        - in: query
          name: id
          required: false
          schema:
            type: integer
          description: id по которому будем обновлять интегратора
        - in: query
          name: title
          required: false
          schema:
            type: string
          description: title по которому будем обновлять интегратора
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                title:
                  type: string
      responses:
        '200':
          description: успешное обновление полей интегратора
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: './schemas/integrators/RetrieveIntegrator.yaml'

  # TODO: переименование данных методов
  #  преференсы-----------------------------------------------------------------------------------------------------------------
  /account_apartment_list_display_preferences:
    post:
      operationId: create_list_display_preferences
      tags:
        - preferences
      description: Создание преференса. Доступно пользователю и выше
                   Достаёт доступные пользователю апартаменты
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                global_scenarios:
                  type: array
                  description: список с какими-то сценариями
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: id сценария
                      title:
                        type: string
                        description: название сценария

                global_security_order:
                  type: array
                  description: список хуй пойми с чем
                  items:
                    # TODO: заменить на enum
                    type: string
                
                rooms:
                  type: array
                  # TODO: wtf. Почему у объектов списка всего одно поле
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: id комнат наверное
      responses:
        # TODO: статус 201 надо заменить на 200.
        # 201 используется в случае отсутствия данных в ответе
        "201":
          description: что-то произошло :/
          content:
            application/json:
              schema:
                $ref: './schemas/preferences/AccountApartmentListDisplayPreferences.yaml'
        # TODO: какой статус код ?
        # UserPermissionError

    # TODO: дописать
    get:
      # TODO: метод - полный кал, который стоит переписать
      operationId: retrieve_list_display_preferences
      description: Получение объекта. Доступно с ролью пользователя и выше.
                   По id пользователя достаёт единственную сущность AccountApartmentListDisplayPreferences
                   Итерируем данные апартаментов, лежащие в поле preferences полученного объекта
                   Убираем все апартаменты из поля preferences, которые недоступны пользователю.
      responses:
        "200":
          description: Успешное получение объекта
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: id апартаментов
                  account_id:
                    type: integer
                    # TODO: что за аккаунты могут быть
                    description: id некого аккаунта
                  updated_at:
                    type: string
                    format: date-time
                    example: "2022-02-14T11:59:37.945Z"
                  # TODO: абсолютно конченно устроено хранение данных на бэкенде
                  preferences:
                    type: array
                    items:
                      type: object
                      properties:
                        apartment_id:
                          type: integer
                        displayed_title:
                          type: string

  /account_apartment_list_display_preferences/{pk}:
    put:
      operationId: update_list_display_preferences
      description: Доступно юзеру и выше. Достаёт доступные апартаменты.
                   Проверяет может ли пользователь изменить преференсы
                   (может, если ему доступна резиденция). иначе выплёвывает
                   UserPermissionError. В случае успеха обновляет json поле preferences в 
                   AccountApartmentListDisplayPreferences
      tags:
        - preferences
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  apartment_id:
                    type: integer
                  displayed_title:
                    type: string
                  displayed_image_hash:
                    type: string
                  displayed_image_id:
                    type: integer
      responses:
        '200':
          description: Обновлённый объект AccountApartmentListDisplayPreferences
          content:
            application/json:
              schema:
                $ref: './schemas/preferences/AccountApartmentListDisplayPreferences.yaml'
        '404':
          description: "Не могу найти >_<"

    delete:
      operationId: delete_list_display_preferences
      tags:
        - preferences
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
      responses:
        '404':
          description: удаляемый объект не найден
        '204':
          description: удаление произведено

  /account_apartment_preferences:
    # Закончить описание
    post:
      operationId: create_account_apartment_preferences
      description: Достаёт объект AccountApartmentPreferences.
                   Создаёт новый преференс, если его не существует
      tags:
        - preferences
      parameters:
        - in: query
          name: room_group_support
          description: ни малейшего понимания
          required: false
          schema:
            type: boolean
        - in: query
          name: apartment_id
          description: id апартаментов, в которых мы создаём преференсы
          required: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: './schemas/preferences/AccountApartmentPreferences.yaml'
      responses:
        '201':
          description: Успешное создание чего-то
          content:
            application/json:
              schema:
                $ref: './schemas/preferences/AccountApartmentPreferences2.yaml'

    get:
      operationId: retrieve_account_apartment_preferences
      tags:
        - preferences
      parameters:
        - in: query
          name: room_group_support
          description: ни малейшего понимания
          required: false
          schema:
            type: boolean
        - in: query
          name: apartment_id
          description: id апартаментов, в которых мы создаём преференсы
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: успешное получение преференсов
          content:
            application/json:
              schema:
                $ref: "./schemas/preferences/AccountApartmentPreferences2.yaml"
          
        '400':
          description: type of apartment_id must be integer

  /account_apartment_preferences/{pk}:
    put:
      operationId: update_account_apartment_preferences
      tags:
        - preferences
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
        - in: query
          name: room_group_support
          required: false
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: './schemas/preferences/AccountApartmentPreferences2.yaml'
      responses:
        '200':
          description: успешное обновление преференсов
          content:
            application/json:
              schema:
                $ref: "./schemas/preferences/AccountApartmentPreferences2.yaml"

    delete:
      operationId: delete_account_apartment_preferences
      tags:
        - preferences
      description: удаление объекта AccountApartmentPreferences
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
      responses:
        '404':
          description: успешное удаление AccountApartmentPreferences
        '204':
          description: успешное удаление

  /account_apartment_preferences/update_room_group_order/{pk}:
    put:
       operationId: update_room_groups_order
       parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer

        - in: query
          name: room_group_support
          required: false
          schema:
            type: boolean

       tags:
        - preferences
       responses:
        '200':
          description: успешное изменение порядка преференсов
          content:
            application/json:
              schema:
                $ref:  "./schemas/preferences/AccountApartmentPreferences2.yaml"
        '404':
          description: Account Apartment Preferences Not Found!


  /account_apartment_preferences/delete_room_groups/{pk}:
    delete:
      operationId: delete_room_groups
      description: доступно с ролью пользователя и выше
      tags:
        - preferences
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "./schemas/preferences/AccountApartmentPreferences.yaml"
      responses:
        '200':
          description: успешное изменение порядка преференсов
          content:
            application/json:
              schema:
                $ref:  "./schemas/preferences/AccountApartmentPreferences2.yaml"

  /account_apartment_preferences/set_default:
    post:
      operationId: set_default_apartment_preferences
      tags:
        - preferences
      parameters:
        - in: query
          name: apartment_id
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref:  "./schemas/preferences/AccountApartmentPreferences2.yaml"
        # NotFound(f"Default preference for apartment with id {apartment_id} not found")

  /account_apartment_preferences/get_default:
    # TODO: на фронте не используется
    get:
      operationId: get_default_apartment_preferences
      parameters:
        - in: query
          name: apartment_id
          schema:
            type: integer
      tags:
        - preferences
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref:  "./schemas/preferences/AccountApartmentPreferences2.yaml"

  /admin/account_apartment_default_preferences:
    post:
      operationId: create_account_apartment_default_preferences
      tags:
        - preferences
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "./schemas/preferences/AccountApartmentPreferences.yaml"
      responses:
        # TODO: должно быть 200.
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref:  "./schemas/preferences/AccountApartmentPreferences2.yaml"

    get:
      operationId: retrieve_account_apartment_default_preferences
      tags:
        - preferences
      parameters:
        - in: query
          name: apartment_id
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref:  "./schemas/preferences/AccountApartmentPreferences2.yaml"

  /admin/account_apartment_default_preferences/{pk}:
    put:
      operationId: update_account_apartment_default_preferences
      tags:
        - preferences
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
        - in: query
          name: apartment_id
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref:  "./schemas/preferences/AccountApartmentPreferences2.yaml"
                # NotFound('Account Apartment Default Preferences Not Found!', 404)

    delete:
      operationId: delete_account_apartment_default_preferences
      tags:
        - preferences
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: success
        '404':
          description: Account Apartment Default Preferences Not Found!

  /admin/account_apartment_default_preferences/update_room_groups_order/{pk}:
    put:
      operationId: update_room_groups_order
      tags:
        - preferences
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref:  "./schemas/preferences/AccountApartmentPreferences.yaml"
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref:  "./schemas/preferences/AccountApartmentPreferences2.yaml"
        '404':
          description: Account Apartment Default Preferences Not Found!

  /admin/account_apartment_default_preferences/delete_room_groups/{pk}:
    delete:
      operationId: delete_room_groups
      tags:
        - preferences
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "./schemas/preferences/AccountApartmentPreferences2.yaml"
      responses:
        '200':
          description: "
            — Кто тебе дом строил? Здорово получилось…
            — Да пидорасы!
            — ??
            — Нанял рабочих залить фундамент.
              Выкопали, залили, ушли.
              Нанял каменщиков, те пришли спрашивают:
                Какие пидорасы фундамент заливали?
                Стены выложили, ушли.
                Нанял штукатуров, те тоже — что за пидорасы кладку делали?
              Ну, и так далее. Вот и получается,
              что дом строили одни пидорасы… 
            
            pidoras architecture pattern"

  # # apartments ---------------------------------------------------------------------------
  /admin/apartments/{pk}:
    $ref: './routes/apartments/detailed.yaml'

  /admin/apartments:
    $ref: './routes/apartments/apartmets.yaml'

  /admin/apartments/get_list_related_entities:
    $ref: './routes/apartments/get_list_related_entities.yaml'

  /admin/apartments/change_residence_id/{pk}:
    $ref: './routes/apartments/change_residence_id.yaml'

  # # пользовательская апишка на апартаменты
  /apartments/{pk}:
    $ref: './routes/apartments/user_apartments_detailed.yaml'

  # Нужно дописать
  # /apartments:
  #   $ref: "./routes/apartments/user_apartments.yaml"

  /admin/apartments_types/list:
    $ref: './routes/apartments/list_apartments_types.yaml'

  /api/v2/admin/apartments/get_list_related_entities:
    $ref: "./routes/apartments/get_list_related_entities.yaml"

  /api/v2/admin/apartments/clone/{pk}:
    $ref:

  # /api/v2/admin/apartments/change_residence_id/{pk}'   НЕ ИСПОЛЬЗУЕТСЯ

  # # users ------------------------------------------------------------------------------
  
  # TODO:
  # /admin/users:
  #   $ref: "./routes/users/admin_users.yaml"

  /admin/retrieve_user_by_contact:
    $ref: "./routes/users/retrieveUserByContact.yaml"

  /admin/users/{pk}:
    $ref: "./routes/users/admin_detailed.yaml"

  /admin/login:
    post:
      operationId: admin_login
      tags:
        - auth
      parameters:
        - in: header
          name: X-Schema
          schema:
            type: string
            example: public
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                email:
                  type: string
                client_unique_id:
                  type: string
      responses:
        "200":
          description: Успешная авторизация
          content:  
            application/json:
              schema:
                $ref: "./schemas/auth/SuccessAdminLoginResponse.yaml"
  # TODO:
  /admin/users/all_user_phones:
    $ref: "./routes/users/all_user_phones.yaml"

  /users/registration:
    $ref: "./routes/auth/registration.yaml"

  /users/get_allowed_auth_method:
    $ref: "./routes/auth/get_allowed_auth_method.yaml"

  /users/registration/confirm:
    $ref: "./routes/auth/confirm.yaml"

  /users/login:
    $ref: "./routes/auth/user_login.yaml"

  /users/login_email:
    $ref: "./routes/auth/user_login_using_email.yaml"
  
  # TODO:
  /users/confirm_code:
    $ref: "./routes/auth/confirm_code.yaml"

  /users/confirm_email_code:
    $ref: "./routes/auth/confirm_email_code.yaml"

  /users/refresh_token_new:
    $ref: "./routes/auth/refresh_token.yaml"

  /user_details:
    $ref: "./routes/users/user_details.yaml"

  /users/{pk}:
    $ref: "./routes/users/delete.yaml"

  /user_info:
    $ref: "./routes/users/user_info.yaml"

  /user_by_phone_number:
    $ref: "./routes/users/get_or_create_by_phone_number.yaml"

  # clients for users
  /clients:
    $ref: "./routes/clients/clients.yaml"

  /clients/{pk}:
    $ref: "./routes/clients/clients_detailed.yaml"

  /client_by_unique_id:
    $ref: "./routes/clients/client_by_unique_id.yaml"

  #clients for admin
  /admin/clients:
    $ref: "./routes/clients/admin_clients.yaml"

  /admin/clients/{pk}:
    $ref: "./routes/clients/admin_clients_other.yaml"

  /admin/admin-clients/{pk}:
    $ref: "./routes/clients/admin_clients_detailed.yaml"

  /admin/client_by_unique_id:
    $ref: "./routes/clients/admin_client_by_unique_id.yaml"


  # scenarios
  /admin/scenarios:
    $ref: "./routes/scenarios/admin_scenarios.yaml"

  /admin/scenarios/{pk}:
    $ref: "./routes/scenarios/admin_scenarios_detailed.yaml"

  /admin/scenarios/set_room_relations:
    post: 
      tags:
        - scenarios
      operationId: set_room_relations
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                room_id:
                  type: integer
                  example:  50
                scenario_ids:
                  type: array
                  example:  [11, 13]
                  items:
                    type: integer
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                description: кол-во обновлённых объектов
                type: integer

  
  /admin/scenarios/set_global:
    post:
      operationId: scenarios_set_global
      tags:
        - scenarios
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - scenario_ids
              properties:
                scenario_ids:
                  type: array
                  example: [11, 13]
                  items:
                    type: integer
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                description: кол-во обновлённых объектов
                type: integer

  /admin/scenarios/set_apartment_relations:
    post:
      operationId: scenarios_set_apartment_relations
      tags:
        - scenario
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                  - apartment_id
                  - scenario_ids
              properties:
                apartment_id:
                  type: integer
                  example: 1
                scenario_ids:
                  type: array
                  example: [39]
                  items:
                    type: integer
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                description: кол-во обновлённых объектов
                type: integer  

  /admin/scenarios/get_action_ids:
    get:
      operationId:  scenarios_get_action_ids
      tags:
        - scenario
      parameters:
        - in: query
          name: scenario_id
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  action_ids:
                    type: array
                    items:
                      type: integer

  /admin/scenarios/clone/{pk}:
    post:
      operationId: scenario_clone
      description: доступно инженеру и выше
      tags:
        - scenario
      parameters:
        - in: path
          required: true
          name: pk
          schema:
            type: integer
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: './schemas/scenarios/RetrieveScenarioWithActions.yaml'
        '404':
          description: Not found

  # сценарии. Пользователь
  /scenarios:
    get:
      operationId: scenario_list
      tags:
        - scenario
      parameters:
        - in: query
          name: global
          schema:
            type: boolean
            example: true

        - in: query
          name: apartment_id
          schema:
            type: integer
      responses:
        "200":
          description: success
          content:
            application/json:
              schema:
                $ref: "./schemas/scenarios/RetrieveScenarioWithActions.yaml"

    post:
      operationId: scenario_create
      tags:
        - scenario
      parameters:
        - in: query
          name: apartment_id
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: "./schemas/scenarios/CreateScenario.yaml"
      responses:
          "201":
            description: success
            content:
              application/json:
                schema:
                  $ref: "./schemas/scenarios/RetrieveScenario.yaml"

    delete:
      operationId: multiple-scenario-delete
      tags:
        - scenario
      parameters:
        - in: query
          name: apartment_id
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: array
                  example: [1, 2]
                  items:
                    type: integer
      responses:
        "204":
          description: success

  /scenarios/{pk}:
    get:
      operationId: scenario_retrieve
      tags:
        - scenario
      parameters:
        - in: path
          required: true
          name: scenario_id
          schema:
            type: integer
        - in: query
          name: apartment_id
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: './schemas/scenarios/RetrieveScenarioWithActions.yaml'

    delete:
      operationId: scenario_delete
      tags:
        - scenario
      parameters:
        - in: path
          name: apartment_id
          required: true
          schema:
            type: integer
        - in: query
          name: scenario_id
          schema:
            type: integer
      responses:
        '204':
          description: success

    put:
      operationId: scenario-update
      tags:
        - scenario
      parameters:
        - in: path
          required: true
          name: scenario_id
          schema:
            type: integer
        - in: query
          name: apartment_id
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: './schemas/scenarios/RetrieveScenarioWithActions.yaml'

  /scenarios/activate/{pk}:
    post:
      operationId: run-scenario
      tags:
        - scenario
      parameters:
        - in: path
          required: true
          name: scenario_id
          schema:
            type: integer
        - in: query
          name: apartment_id
          schema:
            type: integer
      responses:
        '204':
          description: success

  /scenarios/set_actions/{pk}:
    post:
      operationId: set-actions
      tags:
        - scenario
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  capability_id:
                    type: integer
                    example: 19
                  value:
                    type: string
                    example: "1"
                  residence_id:
                    type: integer
                    example: 1
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 104
                    scenario_id:
                      type: integer
                      example: 31
                    capability_id:
                      type: integer
                      example: 19
                    value:
                      type: string
                      example: "1"
                    residence_id:
                      type: integer
                      example: 1
                    updated_at:
                      type: string
                      format: date-time
                      example: "2021-02-19T09:56:27.866057+00:00"

  # actions
  /admin/actions:
    get:
      operationId: admin_actions_list
      tags:
        - actions
      parameters:
        - in: query
          name: scenario_id
          schema:
            type: integer
        - $ref: "./schemas/core/filters/sorting_query.yaml"
        - $ref: "./schemas/core/filters/pagination_query.yaml#/PageQuery"
        - $ref: "./schemas/core/filters/pagination_query.yaml#/MaxResultsQuery"
        - $ref: "./schemas/core/filters/pagination_query.yaml#/GetAllQuery"
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "./schemas/actions/RetrieveAction.yaml"

    post:
      operationId: admin_actions_create
      tags:
        - actions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - scenario_id
                - capability_id
                - value
                - residence_id
              allOf:
                - $ref: "./schemas/actions/RetrieveAction.yaml"
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: './schemas/actions/RetrieveAction.yaml'

    delete:
      operationId: multiple_admin_actions_delete
      tags:
        - actions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: array
                  items:
                    type: integer
      responses:
        '204':
          description: success
            
  /admin/actions/{pk}:
    get:
      operationId: admin_actions_retrieve
      tags:
        - actions
      parameters:
        - in: path
          required: true
          name: pk
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: './schemas/actions/RetrieveAction.yaml'

    delete:
      operationId: admin_actions_delete
      tags:
        - actions
      parameters:
        - in: path
          required: true
          name: pk
          schema:
            type: integer
      responses:
        "204":
          description: success
    
    put:
      operationId: admin_actions_update
      tags:
        - actions
      parameters:
        - in: path
          required: true
          name: pk
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              # TODO: поставить update
              $ref: "./schemas/actions/RetrieveAction.yaml"
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: './schemas/actions/RetrieveAction.yaml'
        

components:
#   schemas:
    # апартаменты
    # RetrieveApartments:
    #   $ref: './schemas/apartments/RetrieveApartments.yaml'

    # Preference:
    #   $ref: './schemas/preferences/Preference.yaml'

  # do not touch!
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      