openapi: 3.0.3
info:
  title: sh api
  version: n0.1
servers:
  - url: '{api_domain}/api/{api_version}'
    variables:
      api_domain:
        default: https://dev.simple-home.liis.su
        enum:
          - https://dev.simple-home.liis.su
          - https://simple-home.liis.su
          - http://localhost:8080
      api_version:
        default: v2
        enum:
          - v2
          - v1
security:
  - BearerAuth: []
paths:
  /admin/apartment_demo_access_by_apartment_id/{apartment_id}:
    get:
      operationId: get_demo_access_by_apartment_id
      tags:
        - demo_access
      parameters:
        - $ref: '#/components/parameters/apartmentId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveDemoAccess'
              examples:
                DemoPeriodEnded:
                  summary: Демо доступ истек
                  description: Демо доступ истек 3 дня назад. Доступ к квартире запрещен
                  value:
                    id: 10
                    demo_duration_days: 30
                    demo_start_day: '2024-04-29'
                    demo_days_left: -3
                    apartment_id: 1888
                    is_access_active: false
                DemoPeriodNotEnded:
                  summary: Демо активирован
                  description: Демо доступ истечет через 20 дней. Доступ к квартире разрешен
                  value:
                    id: 10
                    demo_duration_days: 30
                    demo_start_day: '2024-04-29'
                    demo_days_left: 20
                    apartment_id: 1888
                    is_access_active: true
                DemoPeriodNotStarted:
                  summary: Демо доступ не был активирован
                  description: Демо доступ не был активирован.  Он будет активирован при первом открытии квартиры в приложении.  Доступ к квартире разрешен
                  value:
                    id: 10
                    demo_duration_days: 30
                    demo_start_day: null
                    demo_days_left: null
                    apartment_id: 1888
                    is_access_active: true
    components:
      parameters:
        apartmentId:
          in: path
          name: apartment_id
          description: id апартамента
          required: true
          schema:
            type: integer
  /admin/apartment_demo_access/{demo_access_id}:
    get:
      operationId: get_demo_access
      tags:
        - demo_access
      parameters:
        - $ref: '#/components/parameters/demoAccessId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveDemoAccess'
              examples:
                DemoPeriodEnded:
                  summary: Демо доступ истек
                  description: Демо доступ истек 3 дня назад. Доступ к квартире запрещен
                  value:
                    id: 10
                    demo_duration_days: 30
                    demo_start_day: '2024-04-29'
                    demo_days_left: -3
                    apartment_id: 1888
                    is_access_active: false
                DemoPeriodNotEnded:
                  summary: Демо активирован
                  description: Демо доступ истечет через 20 дней. Доступ к квартире разрешен
                  value:
                    id: 10
                    demo_duration_days: 30
                    demo_start_day: '2024-04-29'
                    demo_days_left: 20
                    apartment_id: 1888
                    is_access_active: true
                DemoPeriodNotStarted:
                  summary: Демо доступ не был активирован
                  description: Демо доступ не был активирован.  Он будет активирован при первом открытии квартиры в приложении.  Доступ к квартире разрешен
                  value:
                    id: 10
                    demo_duration_days: 30
                    demo_start_day: null
                    demo_days_left: null
                    apartment_id: 1888
                    is_access_active: true
    put:
      operationId: update_demo_access
      tags:
        - demo_access
      parameters:
        - $ref: '#/components/parameters/demoAccessId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDemoAccess'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveDemoAccess'
              examples:
                DemoPeriodNotStarted:
                  summary: Демо доступ не был активирован
                  description: Демо доступ не был активирован.  Он будет активирован при первом открытии квартиры в приложении.  Доступ к квартире разрешен
                  value:
                    id: 10
                    demo_duration_days: 30
                    demo_start_day: null
                    demo_days_left: null
                    apartment_id: 1888
                    is_access_active: true
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DemoAccessUpdateForbidden'
          description: Запрещено изменять длительность демо доступа после его активации
    delete:
      operationId: delete_demo_access
      tags:
        - demo_access
      parameters:
        - $ref: '#/components/parameters/demoAccessId'
      responses:
        '204':
          description: демо доступ удален
    components:
      parameters:
        demoAccessId:
          in: path
          name: demo_access_id
          description: id демо доступа
          required: true
          schema:
            type: integer
      schemas:
        DemoAccessUpdateForbidden:
          type: object
          properties:
            error_type:
              type: string
              nullable: false
              example: VALIDATION_ERROR
            detail:
              type: string
              nullable: false
              example: Запрещено изменять демо доступы после начала демо периода
          required:
            - error_type
            - detail
  /admin/apartment_demo_access:
    post:
      operationId: create_demo_access
      tags:
        - demo_access
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDemoAccess'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveDemoAccess'
              examples:
                DemoPeriodNotStarted:
                  summary: Демо доступ не был активирован
                  description: Демо доступ создан, но не активирован, т.к. в квартире нет жильцов.  Он будет активирован при первом открытии квартиры в приложении
                  value:
                    id: 10
                    demo_duration_days: 30
                    demo_start_day: null
                    demo_days_left: null
                    apartment_id: 1888
                    is_access_active: true
                DemoPeriodNotEnded:
                  summary: Демо активирован
                  description: Демо доступ создан и активирован, т.к. в квартире есть жильцы. Датой начала демо периода считается дата добавления первого жильца.  Доступ к квартире разрешен
                  value:
                    id: 10
                    demo_duration_days: 30
                    demo_start_day: '2024-04-29'
                    demo_days_left: 20
                    apartment_id: 1888
                    is_access_active: true
  /argus/object/{argus_object_id}:
    get:
      operationId: retrieve_argus_object
      tags:
        - argus
      parameters:
        - in: path
          name: argus_object_id
          required: true
          schema:
            type: string
            example: k4jf3kelkrjffle53934d434
            description: id объекта в системе Аргус-спектр
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArgusObject'
        '400':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidPrimaryKey'
                  - $ref: '#/components/schemas/ArgusObjectNotExist'
                  - $ref: '#/components/schemas/ArgusHttpRequestError'
        '401':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ArgusAuthorizationError'
  /argus/object/operation:
    post:
      operationId: send_argus_object_operation
      tags:
        - argus
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArgusObjectOperationSerializer'
      responses:
        '200':
          description: Операция выполнена
        '400':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/WrongArgusOperation'
                  - $ref: '#/components/schemas/ArgusObjectNotExist'
  /admin/buildings/{id}/set_apartments:
    put:
      operationId: admin-set-building-apartments
      description: Привязывает аппартаменты к зданию
      tags:
        - buildings
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: id здания
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                apartments:
                  type: array
                  items:
                    type: integer
      responses:
        '201':
          description: список привязанных апартаментов
          content:
            application/json:
              schema:
                type: object
                properties:
                  updated_apartments:
                    type: array
                    items:
                      type: integer
        '400':
          description: некорректные данные в запросе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          description: недостаточно прав доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          description: здание не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
  /admin/buildings/{id}:
    delete:
      operationId: admin-buildings-delete
      description: Удаляет здание
      tags:
        - buildings
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: id здания
          example: 1
      responses:
        '204':
          description: Успешное удаление
        '400':
          description: некорректные данные в запросе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          description: недостаточно прав доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          description: здание не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    put:
      operationId: admin-buildings-update
      description: обновляет название здания
      tags:
        - buildings
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
          description: id здания
          example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
      responses:
        '201':
          description: Успешное изменение
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildingSchema'
        '400':
          description: некорректные данные в запросе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          description: недостаточно прав доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          description: здание не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
  /admin/buildings:
    post:
      operationId: admin-buildings-create
      description: Создает здание
      tags:
        - buildings
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateBuildingSchema'
      responses:
        '201':
          description: успешно создано
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BuildingSchema'
        '400':
          description: некорректные данные в запросе
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/WrongRequestBody'
                  - $ref: '#/components/schemas/EntityAlreadyExists'
        '403':
          description: недостаточно прав доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
    delete:
      operationId: admin-multiple-buildings-delete
      description: Удаляет несколько зданий
      tags:
        - buildings
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: array
                  items:
                    type: integer
      responses:
        '200':
          description: Успешное удаление
        '400':
          description: некорректные данные в запросе
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          description: недостаточно прав доступа
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          description: здание не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    components:
      schemas:
        WrongRequestBody:
          type: object
          properties:
            error_type:
              type: string
              example: VALIDATION_ERROR
              nullable: false
            detail:
              type: string
              example: Неверное тело запроса!
              nullable: false
          required:
            - error_type
            - detail
  /support/create_report:
    post:
      operationId: support-request-create
      description: Отправка запроса в службу поддержки
      tags:
        - customers_support
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SupportRequestSchema'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  request_id:
                    type: integer
                    example: 1
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UnknownSubject'
    components:
      schemas:
        UnknownSubject:
          type: object
          properties:
            detail:
              type: string
              example: Subject "Kekus Pekus" Is Unknown!
        SupportRequestSchema:
          type: object
          properties:
            subject:
              type: string
              example: Приложение вылетает или работает неправильно
            message:
              type: string
              example: Говно ваш симпл хоум, а не умный дом!
            apartment_id:
              type: integer
              example: 1
            email:
              type: string
              example: angry_customer@email.com
            app_version:
              type: string
              example: simplehome v 2.20.1
            device_brand:
              type: string
              example: Apple
            device_model:
              type: string
              example: SE (2-nd generation)
            device_operational_system:
              type: string
              example: IOS
            device_operational_system_version:
              type: string
              example: 16.7
            is_anonymous:
              type: boolean
              example: false
            is_response_required:
              type: boolean
              example: true
  /support/list_subjects:
    get:
      operationId: list-supported-subjects
      description: Получение списка поддерживаемых тем обращений в поддержку
      tags:
        - customers_support
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    eng:
                      type: string
                      example: The app crashes or works incorrectly
                    rus:
                      type: string
                      example: Приложение вылетает или работает неправильно
  /get_weather:
    get:
      operationId: get_weather
      description: Получение информации о погоде
      tags:
        - weather
      parameters:
        - in: query
          name: apartment_id
          schema:
            type: integer
            example: 1
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveWeather'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountApartmentRequired'
        '404':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/AccountApartmentNotFound'
                  - $ref: '#/components/schemas/WeatherNotFound'
    components:
      schemas:
        AccountApartmentRequired:
          type: object
          properties:
            detail:
              type: string
              example: Account Apartment is Required!
        AccountApartmentNotFound:
          type: object
          properties:
            detail:
              type: string
              example: Account Apartment Not Found
        WeatherNotFound:
          type: object
          properties:
            detail:
              type: string
              example: Weather Not Found
  /images:
    post:
      operationId: image-create
      description: загрузка изображений
      tags:
        - images
      parameters:
        - in: query
          name: room_id
          required: false
          schema:
            type: integer
        - in: query
          name: account_id
          required: false
          schema:
            type: integer
        - in: query
          name: residence_id
          required: false
          schema:
            type: integer
        - in: query
          name: account_residence_ordering_id
          required: false
          schema:
            type: integer
        - in: query
          name: support_chat_room_id
          required: false
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: array
              items:
                type: object
                properties:
                  file:
                    type: string
                    format: binary
                required:
                  - file
      responses:
        '200':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ImageSchema'
                  - type: array
                    items:
                      $ref: '#/components/schemas/ImageSchema'
        '400':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/IdMustBeAnInteger'
                  - $ref: '#/components/schemas/EntityAlreadyExists'
  /images/intermediate/hash/{hash}:
    get:
      operationId: fileservice-download-by-intermediate
      description: скачивание изображения с помощью intermediate токена
      tags:
        - images
      parameters:
        - in: path
          name: hash
          required: true
          description: Хеш изображения из таблицы Image
          schema:
            type: string
            example: 7aead86346e6a96620ff0b8c4661d2da
        - in: query
          name: intermediate_token
          required: true
          schema:
            type: string
            example: eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJwaG9uZV9udW1iZXIiOiIrNzkxMTE0MDc4MDkiLCJleHAiOjE2NzgxMjE4NjIuOTU0MzM3NCwiYXBhcnRtZW50X2lkIjpudWxsLCJzY2hlbWEiOm51bGx9.cfIMZviJq2g5aT21FJQ5zRkNYkyUIhtH7ro6JBjMAHU
      responses:
        '200':
          description: Возвращает изображение
          content:
            image/*:
              schema:
                type: string
                format: binary
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvalidImageHash'
        '401':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidToken'
                  - $ref: '#/components/schemas/IntermediateTokenExpired'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageNotFound'
    components:
      schemas:
        InvalidImageHash:
          type: object
          properties:
            detail:
              type: string
              example: Invalid Image Hash!
        ImageNotFound:
          type: object
          properties:
            detail:
              type: string
              example: Image Not Found!
  /images/{image_id}:
    delete:
      operationId: image-delete
      description: удаление изображения
      tags:
        - images
      parameters:
        - $ref: '#/components/parameters/imageId'
      responses:
        '204':
          description: Изображение удалено
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    components:
      parameters:
        imageId:
          in: path
          name: image_id
          description: id изображения
          required: true
          schema:
            type: integer
  /admin/images:
    get:
      operationId: admin-image-list
      description: Получение списка изображений
      tags:
        - images
      parameters:
        - $ref: '#/components/parameters/sorting_query'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageSchema'
    post:
      operationId: admin-image-create
      description: Загрузка изображения
      tags:
        - images
      parameters:
        - in: query
          name: room_id
          required: false
          schema:
            type: integer
        - in: query
          name: account_id
          required: false
          schema:
            type: integer
        - in: query
          name: residence_id
          required: false
          schema:
            type: integer
        - in: query
          name: account_residence_ordering_id
          required: false
          schema:
            type: integer
        - in: query
          name: support_chat_room_id
          required: false
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '200':
          description: Изображение уже существует в файловом хранилище. Изображение записано в БД
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageSchema'
        '201':
          description: Изображение загружено в файловое хранилище и записано в БД
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageSchema'
        '400':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/IdMustBeAnInteger'
                  - $ref: '#/components/schemas/EntityAlreadyExists'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
  /admin/images/templates:
    post:
      operationId: admin-image-template-create
      description: Загрузка изображения в шаблон комнаты (как я понял)
      tags:
        - images
      parameters:
        - in: path
          name: path
          required: true
          description: Отражает путь к папке в файловом хранилище, в которой будет сохранено изображение
          schema:
            type: string
            example: '%2Fimages%2Fresidences%2F4%2Frooms%2Ftemplates%2FАр деко'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageSchema'
        '400':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/EntityAlreadyExists'
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/IdMustBeAnInteger'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
  /admin/images/{image_id}:
    get:
      operationId: admin-image-retrieve
      description: Получение изображения
      tags:
        - images
      parameters:
        - in: path
          name: image_id
          description: id изображения
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageSchema'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    delete:
      operationId: admin-image-delete
      description: Удаление изображения
      tags:
        - images
      parameters:
        - in: path
          name: image_id
          description: id изображения
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: изображение удалено
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    put:
      operationId: admin-image-update
      description: Изменение изображения
      tags:
        - images
      parameters:
        - $ref: '#/components/parameters/imageId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ImageUpdateSchema'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ImageSchema'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityAlreadyExists'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    components:
      parameters:
        imageId:
          in: path
          name: image_id
          description: id изображения
          required: true
          schema:
            type: integer
  /admin/resources:
    get:
      operationId: admin-fileservice-resources
      description: Получение списка изображений по роуту из файлового хранилища
      tags:
        - images
        - fileservice
      parameters:
        - in: query
          name: path
          required: false
          description: Отражает путь к папке в файловом хранилище, в которой будет сохранено изображение
          schema:
            type: string
            example: images/residences/1
      responses:
        '200':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/FileServiceResourcesList'
                  - type: object
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
  /admin/images/hash/{hash}:
    get:
      operationId: admin-fileservice-download
      description: скачивание изображения
      tags:
        - images
      parameters:
        - in: path
          name: hash
          required: true
          description: Хеш изображения из таблицы Image
          schema:
            type: string
            example: 7aead86346e6a96620ff0b8c4661d2da
      responses:
        '200':
          description: Возвращает изображение
          content:
            image/*:
              schema:
                type: string
                format: binary
        '400':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/InvalidImageHash'
                  - $ref: '#/components/schemas/IdMustBeAnInteger'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    components:
      schemas:
        InvalidImageHash:
          type: object
          properties:
            detail:
              type: string
              example: Invalid Image Hash!
  /admin/images/create_dir:
    post:
      operationId: admin-fileservice-create-dir
      description: Создание папки в файловом хранилище
      tags:
        - images
        - fileservice
      parameters:
        - name: path
          in: query
          required: true
          schema:
            type: string
            example: images/residences/52/rooms/templates/Классика/
      responses:
        '200':
          content:
            application/json:
              schema:
                type: string
                example: Directory created
        '409':
          content:
            application/json:
              schema:
                type: string
                example: Directory not created
  /admin/images/search:
    get:
      operationId: admin-fileservice-search
      description: Поиск файла в файловом сервисе
      tags:
        - images
        - fileservice
      parameters:
        - in: query
          name: query
          schema:
            type: string
          description: Поисковой запрос. Принимает имя файла или папки
          example: 3335b78e86fd5343d31b2867fc7036b5.pdf
        - in: query
          name: type
          schema:
            type: string
          description: 'Тип файла: image/audio/video/pdf'
          example: pdf
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    dir:
                      type: boolean
                      example: false
                    path:
                      type: string
                      example: controller_temp/wirenboard-AQM5XQ53/3335b78e86fd5343d31b2867fc7036b5.pdf
        '400':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/IdMustBeAnInteger'
  /admin/notifications:
    get:
      operationId: admin-notifications-list
      description: Получение списка уведомлений
      tags:
        - notifications
      parameters:
        - in: query
          name: apartment_id
          required: false
          schema:
            type: integer
        - in: query
          name: account_id
          required: false
          schema:
            type: integer
        - in: query
          name: send_dt_from
          required: false
          schema:
            type: string
        - in: query
          name: send_dt_to
          required: false
          schema:
            type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocalizedNotificationWithUserNotification'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdMustBeAnInteger'
    post:
      operationId: admin-notifications-create
      description: Создание уведомления
      tags:
        - notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNotivication'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalizedNotificationWithUserNotification'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
    delete:
      operationId: admin-multiple-notifications-delete
      description: Удаление множества уведомлений
      tags:
        - notifications
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/listOfIds'
      responses:
        '204':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detailed_rows:
                    type: array
                    items:
                      type: string
                      example: Хер его, что он возвращает. Там обращение происходит к несуществующей таблице...
                  deleted_rows:
                    type: integer
                    example: 1
                    description: Кол-во удаленных шаблонов действий
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
  /admin/notifications/{notification_id}:
    get:
      operationId: admin-notifications-retrieve
      description: Получение уведомления
      tags:
        - notifications
      parameters:
        - $ref: '#/components/parameters/notificationId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalizedNotificationWithUserNotification'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    delete:
      operationId: admin-notifications-delete
      description: Удаление уведомления
      tags:
        - notifications
      parameters:
        - $ref: '#/components/parameters/notificationId'
      responses:
        '204':
          description: Уведомление удалено
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    patch:
      operationId: admin-notifications-update
      description: Обновление уведомления
      tags:
        - notifications
      parameters:
        - $ref: '#/components/parameters/notificationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNotivication'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LocalizedNotificationWithUserNotification'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
    components:
      parameters:
        notificationId:
          in: path
          name: notification_id
          description: id уведомления
          required: true
          schema:
            type: integer
  /notifications:
    get:
      operationId: notifications-list
      description: Получение списка уведомлений
      tags:
        - notifications
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocalizedNotificationResponse'
    delete:
      operationId: notifications-delete-all
      description: Удаление всех уведомлений
      tags:
        - notifications
      responses:
        '204':
          description: все уведомления удалены
  /notifications/read_all_notifications:
    post:
      operationId: notifications-read-all
      description: Пометить все уведомления как прочитанные
      tags:
        - notifications
      responses:
        '200':
          description: Все уведомления прочитаны
  /notifications/count_unread:
    get:
      operationId: notifications-count-unread
      description: Выдача количества непрочитанных уведомлений
      tags:
        - notifications
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
  /notifications/{notification_id}:
    get:
      operationId: notifications-retrieve
      description: Получение уведомления
      tags:
        - notifications
      parameters:
        - $ref: '#/components/parameters/notificationId'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LocalizedNotificationResponse'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemas-ValidationError'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationNotFound'
    delete:
      operationId: notifications-delete
      description: Удаление уведомления
      tags:
        - notifications
      parameters:
        - $ref: '#/components/parameters/notificationId'
      responses:
        '204':
          description: уведомление удалено
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotificationNotFound'
    patch:
      operationId: notifications-update
      description: Удаление уведомления
      tags:
        - notifications
      parameters:
        - $ref: '#/components/parameters/notificationId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdateNotivication'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserNotification'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    components:
      parameters:
        notificationId:
          in: path
          name: notification_id
          description: id уведомления
          required: true
          schema:
            type: integer
      schemas:
        NotificationNotFound:
          type: object
          properties:
            detail:
              type: string
              example: Notification Not Found!
        ValidationError:
          type: object
          properties:
            detail:
              type: string
              example: apartment_id Must Be An Integer!
  /admin/automations:
    get:
      operationId: list_automations
      description: Получение списка автоматизаций
      tags:
        - automations
      parameters:
        - $ref: '#/components/parameters/sorting_query'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/MaxResultsQuery'
        - $ref: '#/components/parameters/GetAllQuery'
        - in: query
          name: apartment_id
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: Успешное получение списка автоматизаций
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrieveAutomationsSchema'
        '400':
          description: apartment_id должно быть числовым значением
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdMustBeAnInteger'
    post:
      operationId: create_automation
      description: Создание автоматизации
      tags:
        - automations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAutomationsSchema'
      responses:
        '201':
          description: Автоматизация успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveAutomationsSchema'
          links:
            GetAutomationById:
              operationRef: ../../openapi.yaml#/paths/~1admin~1automations~1{automation_id}/get
              parameters:
                automation_id: $response.body#/id
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EntityAlreadyExists'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
    delete:
      operationId: delete_multiple
      description: Удаление нескольких автоматизаций
      tags:
        - automations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/listOfIds'
      responses:
        '204':
          description: Автоматизации удалены
  /admin/automations/{automation_id}:
    get:
      operationId: retrieve_automation
      description: Получение автоматизации
      tags:
        - automations
      parameters:
        - $ref: '#/components/parameters/AutomationPathId'
      responses:
        '200':
          description: Успешное получение автоматизации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveAutomationsSchema'
        '404':
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationNotFound'
    delete:
      operationId: delete_one
      description: Удаление автоматизации
      tags:
        - automations
      parameters:
        - $ref: '#/components/parameters/AutomationPathId'
      responses:
        '204':
          description: Автоматизация удалена
        '404':
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationNotFound'
    put:
      operationId: update_one
      description: Обновление автоматизации
      tags:
        - automations
      parameters:
        - $ref: '#/components/parameters/AutomationPathId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAutomationsSchema'
      responses:
        '201':
          description: Автоматизация успешно обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveAutomationsSchema'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationNotFound'
    components:
      parameters:
        AutomationPathId:
          in: path
          name: automation_id
          description: id автоматизации
          required: true
          schema:
            type: integer
      schemas:
        AutomationNotFound:
          type: object
          properties:
            detail:
              type: string
              example: Automation Not Found!
  /admin/automations/clone/{automation_id}:
    post:
      operationId: clone_automation
      description: Клонирование автоматизации
      tags:
        - automations
      parameters:
        - $ref: '#/components/parameters/AutomationPathId'
      responses:
        '200':
          description: Успешное получение автоматизации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveAutomationsSchema'
        '404':
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationNotFound'
    components:
      parameters:
        AutomationPathId:
          in: path
          name: automation_id
          description: id автоматизации
          required: true
          schema:
            type: integer
      schemas:
        AutomationNotFound:
          type: object
          properties:
            detail:
              type: string
              example: Automation Not Found!
  /automations/{automation_id}:
    get:
      operationId: user_retrieve_automation
      description: Получение автоматизации пользователем
      tags:
        - automations
      parameters:
        - $ref: '#/components/parameters/AutomationPathId'
        - in: query
          name: apartment_id
          required: false
          description: Обязательный параметр, если объект request не содержит apartment
          schema:
            type: integer
      responses:
        '200':
          description: Успешное получение автоматизации
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveAutomationsSchema'
        '400':
          description: Id must be an integer
        '404':
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationNotFound'
    delete:
      operationId: user_delete_one
      description: Удаление автоматизации пользователем
      tags:
        - automations
      parameters:
        - $ref: '#/components/parameters/AutomationPathId'
      responses:
        '204':
          description: Автоматизация удалена
        '400':
          description: Id must be an integer
        '403':
          description: Not enough permissions
        '404':
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationNotFound'
    put:
      operationId: user_update_one
      description: Обновление автоматизации пользователем
      tags:
        - automations
      parameters:
        - $ref: '#/components/parameters/AutomationPathId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAutomationsSchema'
      responses:
        '201':
          description: Автоматизация успешно обновлена
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveAutomationsSchema'
        '403':
          description: Not enough permissions
        '404':
          description: Не найдено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AutomationNotFound'
    components:
      parameters:
        AutomationPathId:
          in: path
          name: automation_id
          description: id автоматизации
          required: true
          schema:
            type: integer
      schemas:
        AutomationNotFound:
          type: object
          properties:
            detail:
              type: string
              example: Automation Not Found!
  /automation_triggers:
    get:
      operationId: user_list_automation_triggers
      description: Выдача списка триггеров автоматизаций для пользователя
      tags:
        - automation_triggers
      parameters:
        - in: query
          name: apartment_id
          required: false
          description: Обязательный параметр, если объект request не содержит apartment
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrieveAutomationTrigger'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdMustBeAnInteger'
    post:
      operationId: user_create_automation_trigger
      description: Создание триггера автоматизации пользователем
      tags:
        - automation_triggers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAutomationTrigger'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveAutomationTrigger'
        '400':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IdMustBeAnInteger'
                  - $ref: '#/components/schemas/EntityAlreadyExists'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
  /automation_triggers/{automation_trigger_id}:
    get:
      operationId: user_get_automation_triggers
      description: Получение триггера автоматизации для пользователя
      tags:
        - automation_triggers
      parameters:
        - $ref: '#/components/parameters/AutomationTriggerPathId'
        - in: query
          name: apartment_id
          required: false
          description: Обязательный параметр, если объект request не содержит apartment
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveAutomationTrigger'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdMustBeAnInteger'
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Automation Trigger Not Found!
    delete:
      operationId: user_delete_automation_trigger
      description: Удаление триггера автоматизации пользователем
      tags:
        - automation_triggers
      parameters:
        - $ref: '#/components/parameters/AutomationTriggerPathId'
        - in: query
          name: apartment_id
          required: false
          description: Обязательный параметр, если объект request не содержит apartment
          schema:
            type: integer
      responses:
        '204':
          description: Триггер удален
        '400':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IdMustBeAnInteger'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Automation Trigger Not Found!
    put:
      operationId: user_update_automation_trigger
      description: Обновление триггера автоматизации пользователем
      tags:
        - automation_triggers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAutomationTrigger'
      parameters:
        - $ref: '#/components/parameters/AutomationTriggerPathId'
        - in: query
          name: apartment_id
          required: false
          description: Обязательный параметр, если объект request не содержит apartment
          schema:
            type: integer
      responses:
        '201':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrieveAutomationTrigger'
        '400':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IdMustBeAnInteger'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Automation Trigger Not Found!
    components:
      parameters:
        AutomationTriggerPathId:
          in: path
          name: automation_trigger_id
          description: id триггера автоматизации
          required: true
          schema:
            type: integer
  /admin/automation_triggers:
    get:
      operationId: admin_list_automation_triggers
      description: Выдача списка триггеров автоматизаций для админа
      tags:
        - automation_triggers
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrieveAutomationTrigger'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
    post:
      operationId: admin_create_automation_trigger
      description: Создание триггера автоматизации пользователем
      tags:
        - automation_triggers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAutomationTrigger'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveAutomationTrigger'
        '400':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IdMustBeAnInteger'
                  - $ref: '#/components/schemas/EntityAlreadyExists'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/schemas-AutomationNotFound'
    delete:
      operationId: admin_delete_multiple_automation_triggers
      description: Удаление множества триггеров автоматизаций админом
      tags:
        - automation_triggers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/listOfIds'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detailed_rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/RetrieveAutomationTrigger'
                  deleted_rows:
                    type: integer
                    example: 1
                    description: Кол-во удаленных триггеров
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
    components:
      schemas:
        AutomationNotFound:
          type: object
          properties:
            detail:
              type: string
              example: Automation with id {automation_id} not found
  /admin/automation_triggers/{automation_trigger_id}:
    get:
      operationId: admin_get_automation_triggers
      description: Получение триггера автоматизации для админа
      tags:
        - automation_triggers
      parameters:
        - $ref: '#/components/parameters/AutomationTriggerPathId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveAutomationTriggerWithResidenceId'
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Automation Trigger Not Found!
    delete:
      operationId: admin_delete_automation_trigger
      description: Удаление триггера автоматизации админом
      tags:
        - automation_triggers
      parameters:
        - $ref: '#/components/parameters/AutomationTriggerPathId'
      responses:
        '204':
          description: Триггер удален
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Automation Trigger Not Found!
    put:
      operationId: admin_update_automation_trigger
      description: Обновление триггера автоматизации админом
      tags:
        - automation_triggers
      parameters:
        - $ref: '#/components/parameters/AutomationTriggerPathId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAutomationTrigger'
      responses:
        '201':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrieveAutomationTrigger'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Automation Trigger Not Found!
    components:
      parameters:
        AutomationTriggerPathId:
          in: path
          name: automation_trigger_id
          description: id триггера автоматизации
          required: true
          schema:
            type: integer
  /automation_actions/{automation_action_id}:
    get:
      operationId: user_get_automation_action
      description: Получение действия автоматизации для пользователя
      tags:
        - automation_actions
      parameters:
        - $ref: '#/components/parameters/AutomationActionPathId'
        - in: query
          name: apartment_id
          required: false
          description: Обязательный параметр, если объект request не содержит apartment
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveAutomationAction'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdMustBeAnInteger'
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Automation Action Not Found!
    delete:
      operationId: user_delete_automation_action
      description: Удаление действия автоматизации пользователем
      tags:
        - automation_actions
      parameters:
        - $ref: '#/components/parameters/AutomationActionPathId'
        - in: query
          name: apartment_id
          required: false
          description: Обязательный параметр, если объект request не содержит apartment
          schema:
            type: integer
      responses:
        '204':
          description: Действие удалено
        '400':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IdMustBeAnInteger'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Automation Action Not Found!
    put:
      operationId: user_update_automation_action
      description: Обновление триггера автоматизации пользователем
      tags:
        - automation_actions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAutomationAction'
      parameters:
        - $ref: '#/components/parameters/AutomationActionPathId'
        - in: query
          name: apartment_id
          required: false
          description: Обязательный параметр, если объект request не содержит apartment
          schema:
            type: integer
      responses:
        '201':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrieveAutomationAction'
        '400':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IdMustBeAnInteger'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Automation Action Not Found!
    components:
      parameters:
        AutomationActionPathId:
          in: path
          name: automation_action_id
          description: id действия автоматизации
          required: true
          schema:
            type: integer
  /automation_actions:
    get:
      operationId: user_list_automation_actions
      description: Выдача списка триггеров автоматизаций для пользователя
      tags:
        - automation_actions
      parameters:
        - in: query
          name: apartment_id
          required: false
          description: Обязательный параметр, если объект request не содержит apartment
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrieveAutomationAction'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdMustBeAnInteger'
    post:
      operationId: user_create_automation_action
      description: Создание триггера автоматизации пользователем
      tags:
        - automation_actions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAutomationAction'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveAutomationAction'
        '400':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IdMustBeAnInteger'
                  - $ref: '#/components/schemas/EntityAlreadyExists'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
  /admin/automation_actions/{automation_action_id}:
    get:
      operationId: admin_get_automation_action
      description: Получение действия автоматизации для админа
      tags:
        - automation_actions
      parameters:
        - $ref: '#/components/parameters/AutomationActionPathId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveAutomationAction'
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Automation Action Not Found!
    delete:
      operationId: admin_delete_automation_action
      description: Удаление действия автоматизации админом
      tags:
        - automation_actions
      parameters:
        - $ref: '#/components/parameters/AutomationActionPathId'
      responses:
        '204':
          description: Действие удалено
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Automation Action Not Found!
    put:
      operationId: admin_update_automation_action
      description: Обновление триггера автоматизации админом
      tags:
        - automation_actions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAutomationAction'
      parameters:
        - $ref: '#/components/parameters/AutomationActionPathId'
      responses:
        '201':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrieveAutomationAction'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Automation Action Not Found!
    components:
      parameters:
        AutomationActionPathId:
          in: path
          name: automation_action_id
          description: id действия автоматизации
          required: true
          schema:
            type: integer
  /admin/automation_actions:
    get:
      operationId: admin_list_automation_actions
      description: Выдача списка триггеров автоматизаций для админа
      tags:
        - automation_actions
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrieveAutomationAction'
    post:
      operationId: admin_create_automation_action
      description: Создание триггера автоматизации админом
      tags:
        - automation_actions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAutomationAction'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveAutomationAction'
        '400':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/IdMustBeAnInteger'
                  - $ref: '#/components/schemas/EntityAlreadyExists'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
    delete:
      operationId: admin_delete_multiple_automation_action
      description: Удаление множества действий автоматизации админом
      tags:
        - automation_actions
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/listOfIds'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detailed_rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/RetrieveAutomationAction'
                  deleted_rows:
                    type: integer
                    example: 1
                    description: Кол-во удаленных действий триггеров
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
  /admin/apartment_templates:
    get:
      operationId: admin-apartment-templates-list
      description: Получение списка шаблонов квартир
      tags:
        - apartment_templates
      parameters:
        - $ref: '#/components/parameters/sorting_query'
        - $ref: '#/components/parameters/CreateBeforeFilter'
        - $ref: '#/components/parameters/CreateAfterFilter'
        - $ref: '#/components/parameters/UpdateBeforeFilter'
        - $ref: '#/components/parameters/UpdateAfterFilter'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrieveApartmentTemplate'
    post:
      operationId: admin-apartment-templates-create
      description: Создание шаблона квартиры
      tags:
        - apartment_templates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApartmentTemplate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveApartmentTemplate'
        '400':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/EntityAlreadyExists'
                  - $ref: '#/components/schemas/controllerIpValidationError'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
    delete:
      operationId: admin-multiple-apartment-templates-delete
      description: Удаление множества шаблонов квартир
      tags:
        - apartment_templates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/listOfIds'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detailed_rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/RetrieveApartmentTemplate'
                  deleted_rows:
                    type: integer
                    example: 1
                    description: Кол-во удаленных шаблонов квартир
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
    components:
      schemas:
        controllerIpValidationError:
          type: object
          properties:
            detail:
              type: string
              example: controller_ip required if is_dhcp is false
  /admin/apartment_templates/import_apartments:
    post:
      operationId: admin-apartment-templates-import
      description: Импорт шаблонов квартир из xlsx файла.
      tags:
        - apartment_templates
      parameters:
        - $ref: '#/components/parameters/Required'
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
              required:
                - file
      responses:
        '201':
          content:
            application/json:
              schema:
                type: object
                properties:
                  created_apartments:
                    type: integer
                  created_controllers:
                    type: integer
                  created_drivers:
                    type: integer
                  created_rooms:
                    type: integer
                  created_device:
                    type: integer
                  created_capabilities:
                    type: integer
                  created_scenarios:
                    type: integer
                  created_actions:
                    type: integer
                  raised_exceptions:
                    type: array
                    items:
                      type: object
                      properties:
                        line_index:
                          type: integer
                        apartment_number:
                          type: string
                        floor_number:
                          type: string
                        error_message:
                          type: string
        '400':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ResidenceMustBeInteger'
                  - $ref: '#/components/schemas/ResidenceMustNotBeNone'
              examples:
                Must Be An Integer:
                  value:
                    detail: residence_id Must Be An Integer!
                Must Not Be None:
                  value:
                    detail: residence_id Must Not Be None!
                Wrong file format:
                  value:
                    detail: Wrong file format!
                Apartment Types Not Exists:
                  value:
                    detail: Apartment Types Not Exists! Create Apartments Types First
    components:
      schemas:
        ResidenceMustBeInteger:
          type: object
          properties:
            detail:
              type: string
              example: residence_id Must Be An Integer!
        ResidenceMustNotBeNone:
          type: object
          properties:
            detail:
              type: string
              example: residence_id Must Not Be None!
  /admin/apartment_templates/{apartment_template_id}:
    get:
      operationId: admin-apartment-templates-retrieve
      description: Получение шаблона квартиры по id
      tags:
        - apartment_templates
      parameters:
        - $ref: '#/components/parameters/apartmentTemplateId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveApartmentTemplate'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    delete:
      operationId: admin-apartment-templates-delete
      description: Удаление шаблона квартиры
      tags:
        - apartment_templates
      parameters:
        - $ref: '#/components/parameters/apartmentTemplateId'
      responses:
        '204':
          description: Шаблон квартиры удален
        '400':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ValidationError'
                  - $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    components:
      parameters:
        apartmentTemplateId:
          in: path
          name: apartment_template_id
          description: id шаблона квартиры
          required: true
          schema:
            type: integer
  /admin/apartment_templates/controller/{apartment_template_id}:
    put:
      operationId: admin-apartment-templates-update-controller
      description: Данный метод обновляет только те поля в шаблоне квартиры, которые относятся к контроллеру.
      tags:
        - apartment_templates
      parameters:
        - $ref: '#/components/parameters/apartmentTemplateId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApartmentTemplateUpdateController'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveApartmentTemplate'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
    components:
      parameters:
        apartmentTemplateId:
          in: path
          name: apartment_template_id
          description: id шаблона квартиры
          required: true
          schema:
            type: integer
  /admin/apartment_templates/apartment/{apartment_template_id}:
    put:
      operationId: admin-apartment-templates-update-apartment
      description: Данный метод обновляет только те поля в шаблоне квартиры, которые относятся к квартире.
      tags:
        - apartment_templates
      parameters:
        - $ref: '#/components/parameters/apartmentTemplateId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApartmentTemplateUpdateApartment'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveApartmentTemplate'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
    components:
      parameters:
        apartmentTemplateId:
          in: path
          name: apartment_template_id
          description: id шаблона квартиры
          required: true
          schema:
            type: integer
  /admin/room_templates:
    get:
      operationId: admin-room-templates-list
      description: Получение списка шаблонов комнат
      tags:
        - rooms_templates
      parameters:
        - $ref: '#/components/parameters/apartmentTemplateQueryId'
        - $ref: '#/components/parameters/sorting_query'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/MaxResultsQuery'
        - $ref: '#/components/parameters/GetAllQuery'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrieveRoomTemplate'
    post:
      operationId: admin-room-templates-create
      description: Создание шаблонов комнат
      tags:
        - rooms_templates
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateRoomTemplate'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrieveRoomTemplate'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/payloadValidationError'
    delete:
      operationId: admin-multiple-room-templates-delete
      description: Удаление множества шаблонов комнат
      tags:
        - rooms_templates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/listOfIds'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detailed_rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/RetrieveRoomTemplate'
                  deleted_rows:
                    type: integer
                    example: 1
                    description: Кол-во удаленных шаблонов комнат
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
    components:
      parameters:
        apartmentTemplateQueryId:
          in: query
          name: apartment_template_id
          description: id шаблона квартиры
          required: true
          schema:
            type: integer
      schemas:
        payloadValidationError:
          type: object
          properties:
            detail:
              type: string
              example: Payload Type Must Be List Or Dict, Not {type(data)}
  /admin/room_templates/{room_template_id}:
    get:
      operationId: admin-room-templates-retrieve
      description: Получение шаблона комнаты
      tags:
        - rooms_templates
      parameters:
        - $ref: '#/components/parameters/roomTemplateId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveRoomTemplate'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    put:
      operationId: admin-room-templates-update
      description: Обновление шаблона комнаты
      tags:
        - rooms_templates
      parameters:
        - $ref: '#/components/parameters/roomTemplateId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoomTemplate'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveRoomTemplate'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApartmentTemplatesNotFound'
    delete:
      operationId: admin-room-templates-delete
      description: Удаление шаблона комнаты
      tags:
        - rooms_templates
      parameters:
        - $ref: '#/components/parameters/roomTemplateId'
      responses:
        '204':
          description: Шаблон комнаты удален
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    components:
      parameters:
        roomTemplateId:
          in: path
          name: room_template_id
          description: id шаблона комнаты
          required: true
          schema:
            type: integer
      schemas:
        ApartmentTemplatesNotFound:
          type: object
          properties:
            detail:
              type: string
              example: ApartmentTemplates With id {apartment_template_id} Not Found!
  /admin/rooms:
    get:
      operationId: rooms_list
      tags:
        - rooms
      parameters:
        - $ref: '#/components/parameters/sorting_query'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/MaxResultsQuery'
        - $ref: '#/components/parameters/GetAllQuery'
        - $ref: '#/components/parameters/search_query'
        - in: query
          name: apartment_id
          description: фильтрация по апартаментам
          schema:
            type: integer
            example: 1
        - in: query
          name: created_dt_after
          description: noqa
          schema:
            type: string
            format: date-time
        - in: query
          name: updated_dt_after
          description: noqa
          schema:
            type: string
            format: date-time
        - in: query
          name: created_dt_from
          description: noqa
          schema:
            type: string
            format: date-time
        - in: query
          name: updated_dt_from
          description: noqa
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListRooms'
        '404':
          description: NotFound
    post:
      operationId: room_create
      tags:
        - rooms
      description: создание комнаты
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoom'
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRooms'
        '403':
          description: UserPermissionError
        '404':
          description: NotExist
    delete:
      operationId: rooms_delete_multiple
      tags:
        - rooms
      parameters:
        - in: query
          name: delete_devices
          description: флаг удаления устройств
          required: false
          schema:
            type: boolean
            example: true
      description: удаляет несколько комнат
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  description: список с id удаляемых комнат
                  type: array
                  items:
                    type: integer
                  example:
                    - 1
                    - 2
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                description: кол-во удалённых строк
                type: object
                properties:
                  deleted_rows:
                    type: integer
                    example: 2
        '403':
          description: UserPermissionError
  /admin/rooms/{room_id}:
    get:
      operationId: room_retrieve
      tags:
        - rooms
      parameters:
        - in: path
          name: room_id
          required: true
          schema:
            type: integer
          example: 1
      description: Получение полной информации по комнате
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
                  title:
                    type: string
                    example: Уборная Олега Тинькова
                  image_id:
                    type: integer
                    example: 55
                  apartment_id:
                    type: integer
                    example: 1
                  created_at:
                    type: string
                    example: '2020-11-26T17:04:17.558199+00:00'
                    format: date-time
                  updated_at:
                    type: string
                    example: '2024-04-17T06:09:31.352373+00:00'
                    format: date-time
                  residence_id:
                    type: integer
                    example: 1
                  scenarios:
                    type: array
                    items:
                      $ref: '#/components/schemas/RoomScenarioAction'
                  devices:
                    type: array
                    items:
                      $ref: '#/components/schemas/RoomDevice'
        '404':
          description: NotFound
    delete:
      description: Удаляет комнату
      operationId: room_delete
      tags:
        - rooms
      parameters:
        - in: query
          name: delete_devices
          description: флаг удаления устройств
          required: false
          schema:
            type: boolean
            example: true
      responses:
        '204':
          description: Successfully deleted
        '404':
          description: NotFound
    put:
      operationId: room_update
      description: Обновляет комнату
      tags:
        - rooms
      parameters:
        - in: path
          name: room_id
          description: id изменяемой комнаты
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateRoom'
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRooms'
        '400':
          description: EntityAlreadyExists
        '403':
          description: UserPermissionError
        '404':
          description: NotFound
  /admin/rooms/set_apartment_relations:
    post:
      operationId: set_room_apartmnet_relation
      tags:
        - rooms
      description: Связывает комнаты с апартаментами
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                apartment_id:
                  type: integer
                  required: true
                  example: 1
                room_ids:
                  description: List of rooms id to connect with apartment
                  type: array
                  required: true
                  items:
                    type: integer
                  example:
                    - 1
                    - 2
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  count:
                    type: integer
                    example: 1
        '400':
          description: ValidationError
  /admin/rooms/get_list_device_ids:
    get:
      operationId: room_devices_list
      tags:
        - rooms
      parameters:
        - in: query
          name: room_id
          description: id комнаты, устройства которой нужно получить
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  device_ids:
                    type: array
                    items:
                      type: integer
        '400':
          description: IdNotInteger
  /admin/rooms/get_list_scenario_ids:
    get:
      operationId: room_scenarios_list
      tags:
        - rooms
      parameters:
        - in: query
          name: room_id
          description: id комнаты, сценарии которой нужно получить
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  scenario_ids:
                    type: array
                    items:
                      type: integer
        '400':
          description: IdNotInteger
  /admin/set_room_roles:
    post:
      operationId: set_room_roles
      deprecated: true
      tags:
        - rooms
      description: Установка ролей комнат
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  account_apartment_id:
                    type: integer
                    required: true
                  room_id:
                    type: integer
                    required: true
                  residence_id:
                    type: integer
                    required: false
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                type: object
        '400':
          description: NotExist
        '403':
          description: UserPermissionError
  /admin/room_roles/{room_role_id}:
    get:
      operationId: retrieve_roov_role
      description: Уточнить выполняемую функцию
      tags:
        - rooms
      parameters:
        - in: path
          required: true
          name: room_role_id
          schema:
            type: integer
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomRolesModel'
  /admin/room_roles:
    get:
      operationId: room_roles_list
      tags:
        - rooms
      parameters:
        - $ref: '#/components/parameters/sorting_query'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/MaxResultsQuery'
        - $ref: '#/components/parameters/GetAllQuery'
        - $ref: '#/components/parameters/search_query'
        - in: query
          name: apartment_id
          description: id апартаментов
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomRolesModel'
        '400':
          description: IdNotInteger
        '403':
          description: UserPermissionError
    post:
      operationId: room_roles_create
      tags:
        - rooms
      description: создание ролей комнат
      parameters:
        - in: query
          name: apartment_id
          description: id апартаментов
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  account_apartment_id:
                    type: integer
                  room_id:
                    type: integer
                  residence_id:
                    type: integer
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    account_apartment_id:
                      type: integer
                    room_id:
                      type: integer
        '403':
          description: UserPermissionError
        '404':
          description: NotExist
    delete:
      operationId: multiple_delete_room_roles
      tags:
        - rooms
      parameters:
        - in: query
          name: apartment_id
          description: id апартаментов
          schema:
            type: integer
            example: 1
      description: удаляет несколько ролей комнат
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  description: список с id удаляемых ролей комнат
                  type: array
                  items:
                    type: integer
                  example:
                    - 1
                    - 2
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  detailed_rows:
                    type: array
                    items:
                      type: integer
                  deleted_rows:
                    type: integer
        '403':
          description: UserPermissionError
  /admin/driver_templates:
    get:
      operationId: admin-driver-templates-list
      description: Получение  списка шаблонов драйверов
      tags:
        - drivers_templates
      parameters:
        - $ref: '#/components/parameters/apartmentTemplateQueryId'
        - $ref: '#/components/parameters/sorting_query'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/MaxResultsQuery'
        - $ref: '#/components/parameters/GetAllQuery'
        - $ref: '#/components/parameters/search_query'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrieveDriverTemplates'
    post:
      operationId: admin-driver-templates-create
      description: Создание шаблона драйвера
      tags:
        - drivers_templates
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateDriverTemplates'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrieveDriverTemplates'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApartmentTemplatesNotFound'
    delete:
      operationId: admin-multiple-driver-templates-delete
      description: Удаление множества шаблонов драйверов
      tags:
        - drivers_templates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/listOfIds'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detailed_rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/RetrieveDriverTemplates'
                  deleted_rows:
                    type: integer
                    example: 1
                    description: Кол-во удаленных шаблонов драйверов
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
    components:
      parameters:
        apartmentTemplateQueryId:
          in: query
          name: apartment_template_id
          description: id шаблона квартиры
          required: true
          schema:
            type: integer
      schemas:
        ApartmentTemplatesNotFound:
          type: object
          properties:
            detail:
              type: string
              example: ApartmentTemplates With id {apartment_template_id} Not Found!
  /admin/driver_templates/{driver_template_id}:
    get:
      operationId: admin-driver-templates-retrieve
      description: Получение шаблона драйвера
      tags:
        - drivers_templates
      parameters:
        - $ref: '#/components/parameters/driverTemplateId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveDriverTemplates'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    put:
      operationId: admin-driver-templates-update
      description: Обновление шаблона драйвера
      tags:
        - drivers_templates
      parameters:
        - $ref: '#/components/parameters/driverTemplateId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDriverTemplates'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveDriverTemplates'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApartmentTemplatesNotFound'
    delete:
      operationId: admin-driver-templates-delete
      description: Удаление шаблона драйвера
      tags:
        - drivers_templates
      parameters:
        - $ref: '#/components/parameters/driverTemplateId'
      responses:
        '204':
          description: Удаление шаблона драйвера
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    components:
      parameters:
        driverTemplateId:
          in: path
          name: driver_template_id
          description: id шаблона драйвера
          required: true
          schema:
            type: integer
      schemas:
        ApartmentTemplatesNotFound:
          type: object
          properties:
            detail:
              type: string
              example: ApartmentTemplates With id {apartment_template_id} Not Found!
  /admin/device_templates:
    get:
      operationId: admin-device-templates-list
      description: Получение списка шаблонов устройств
      tags:
        - devices_templates
      parameters:
        - $ref: '#/components/parameters/parameters-apartmentTemplateQueryId'
        - $ref: '#/components/parameters/driverTemplateQueryId'
        - $ref: '#/components/parameters/roomTemplateQueryId'
        - $ref: '#/components/parameters/typeQueryId'
        - $ref: '#/components/parameters/subtypeQueryId'
        - $ref: '#/components/parameters/sorting_query'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/MaxResultsQuery'
        - $ref: '#/components/parameters/GetAllQuery'
        - $ref: '#/components/parameters/search_query'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ListDeviceTemplates'
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subtypeValidationError'
    post:
      operationId: admin-device-templates-create
      description: Создание шаблонов устройств
      tags:
        - devices_templates
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateDeviceTemplates'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrieveDeviceTemplates'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/ApartmentTemplatesNotFound'
                  - $ref: '#/components/schemas/failToFind'
    delete:
      operationId: admin-multiple-device-templates-delete
      description: Удаление множества шаблонов устройств
      tags:
        - devices_templates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/listOfIds'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detailed_rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/ListDeviceTemplates'
                  deleted_rows:
                    type: integer
                    example: 1
                    description: Кол-во удаленных шаблонов комнат
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
    components:
      parameters:
        apartmentTemplateQueryId:
          in: query
          name: apartment_template_id
          description: id шаблона квартиры
          required: false
          schema:
            type: integer
        driverTemplateQueryId:
          in: query
          name: driver_template_ids
          description: id шаблона драйвера
          required: false
          schema:
            type: string
        roomTemplateQueryId:
          in: query
          name: room_template_ids
          description: id шаблона комнаты
          required: false
          schema:
            type: string
        typeQueryId:
          in: query
          name: type
          description: Тип устройства. Обязательный параметр, если subtype указан
          required: false
          schema:
            type: string
        subtypeQueryId:
          in: query
          name: subtype
          description: Подтип устройства
          required: false
          schema:
            type: string
      schemas:
        subtypeValidationError:
          type: object
          properties:
            detail:
              type: string
              example: Filter 'type' required when using filter 'subtype'
        ApartmentTemplatesNotFound:
          type: object
          properties:
            detail:
              type: string
              example: ApartmentTemplates With id {apartment_template_id} Not Found!
        failToFind:
          type: object
          properties:
            detail:
              type: string
              example: Fail To Find {error_message}
  /admin/device_templates/{device_template_id}:
    get:
      operationId: admin-device-templates-retrieve
      description: Получение шаблона устройства
      tags:
        - devices_templates
      parameters:
        - $ref: '#/components/parameters/deviceTemplateId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDeviceTemplates'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    put:
      operationId: admin-device-templates-update
      description: Обновление шаблона устройства
      tags:
        - devices_templates
      parameters:
        - $ref: '#/components/parameters/deviceTemplateId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateDeviceTemplates'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveRoomTemplate'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApartmentTemplatesNotFound'
    delete:
      operationId: admin-device-templates-delete
      description: Удаление шаблона устройства
      tags:
        - devices_templates
      parameters:
        - $ref: '#/components/parameters/deviceTemplateId'
      responses:
        '204':
          description: Шаблон комнаты удален
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    components:
      parameters:
        deviceTemplateId:
          in: path
          name: device_template_id
          description: id шаблона устройства
          required: true
          schema:
            type: integer
      schemas:
        ApartmentTemplatesNotFound:
          type: object
          properties:
            detail:
              type: string
              example: ApartmentTemplates With id {apartment_template_id} Not Found!
  /admin/capability_templates:
    get:
      operationId: admin-capability-templates-list
      description: Получение списка шаблонов навыков
      tags:
        - capability_templates
      parameters:
        - $ref: '#/components/parameters/parameters-apartmentTemplateQueryId'
        - $ref: '#/components/parameters/sorting_query'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrieveCapabilitiesTemplates'
    post:
      operationId: admin-capability-templates-create
      description: Создание шаблонов навыков
      tags:
        - capability_templates
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateCapabilitiesTemplates'
      responses:
        '201':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrieveCapabilitiesTemplates'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApartmentTemplatesNotFound'
    delete:
      operationId: admin-multiple-capability-templates-delete
      description: Удаление множества шаблонов навыков
      tags:
        - capability_templates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/listOfIds'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detailed_rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/RetrieveCapabilitiesTemplates'
                  deleted_rows:
                    type: integer
                    example: 1
                    description: Кол-во удаленных шаблонов комнат
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
    components:
      parameters:
        apartmentTemplateQueryId:
          in: query
          name: apartment_template_id
          description: id шаблона квартиры
          required: false
          schema:
            type: integer
      schemas:
        ApartmentTemplatesNotFound:
          type: object
          properties:
            detail:
              type: string
              example: ApartmentTemplates With id {apartment_template_id} Not Found!
  /admin/capability_templates/{capability_template_id}:
    get:
      operationId: admin-capability-templates-retrieve
      description: Получение шаблона навыка
      tags:
        - capability_templates
      parameters:
        - $ref: '#/components/parameters/capabilityTemplateId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveCapabilitiesTemplates'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    put:
      operationId: admin-capability-templates-update
      description: Обновление шаблона навыка
      tags:
        - capability_templates
      parameters:
        - $ref: '#/components/parameters/capabilityTemplateId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCapabilitiesTemplates'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveCapabilitiesTemplates'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApartmentTemplatesNotFound'
    delete:
      operationId: admin-capability-templates-delete
      description: Удаление шаблона навыка
      tags:
        - capability_templates
      parameters:
        - $ref: '#/components/parameters/capabilityTemplateId'
      responses:
        '204':
          description: Шаблон комнаты удален
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    components:
      parameters:
        capabilityTemplateId:
          in: path
          name: capability_template_id
          description: id шаблона навыка
          required: true
          schema:
            type: integer
      schemas:
        ApartmentTemplatesNotFound:
          type: object
          properties:
            detail:
              type: string
              example: ApartmentTemplates With id {apartment_template_id} Not Found!
  /admin/scenario_templates:
    get:
      operationId: admin-scenario-templates-list
      description: Получение списка шаблонов сценариев
      tags:
        - scenario_templates
      parameters:
        - $ref: '#/components/parameters/parameters-apartmentTemplateQueryId'
        - $ref: '#/components/parameters/type'
        - $ref: '#/components/parameters/roomTemplateIds'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/MaxResultsQuery'
        - $ref: '#/components/parameters/GetAllQuery'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScenarioTemplateWithActions'
    post:
      operationId: admin-scenario-templates-create
      description: Создание шаблонов сценариев
      tags:
        - scenario_templates
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateScenarioTemplate'
      responses:
        '201':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrieveScenarioTemplate'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApartmentTemplatesNotFound'
    delete:
      operationId: admin-multiple-scenario-templates-delete
      description: Удаление множества шаблонов сценариев
      tags:
        - scenario_templates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/listOfIds'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detailed_rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/RetrieveScenarioTemplate'
                  deleted_rows:
                    type: integer
                    example: 1
                    description: Кол-во удаленных шаблонов сценариев
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
    components:
      parameters:
        apartmentTemplateQueryId:
          in: query
          name: apartment_template_id
          description: id шаблона квартиры
          required: false
          schema:
            type: integer
        roomTemplateIds:
          in: query
          name: room_template_ids
          description: ids шаблонов сценариев
          required: false
          schema:
            type: string
            example: 1, 2, 3
        type:
          in: query
          name: type
          description: Тип сценария. Может быть либо global либо local
          required: false
          schema:
            type: string
            example: global
      schemas:
        ApartmentTemplatesNotFound:
          type: object
          properties:
            detail:
              type: string
              example: ApartmentTemplates With id {apartment_template_id} Not Found!
  /admin/scenario_templates/{scenario_template_id}:
    get:
      operationId: admin-scenario-templates-retrieve
      description: Получение шаблона сценария
      tags:
        - scenario_templates
      parameters:
        - $ref: '#/components/parameters/scenarioTemplateId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioTemplateWithActions'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    put:
      operationId: admin-scenario-templates-update
      description: Обновление шаблона сценария
      tags:
        - scenario_templates
      parameters:
        - $ref: '#/components/parameters/scenarioTemplateId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCapabilitiesTemplates'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveScenarioTemplate'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApartmentTemplatesNotFound'
    delete:
      operationId: admin-scenario-templates-delete
      description: Удаление шаблона сценария
      tags:
        - scenario_templates
      parameters:
        - $ref: '#/components/parameters/scenarioTemplateId'
      responses:
        '204':
          description: Шаблон сценария удален
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    components:
      parameters:
        scenarioTemplateId:
          in: path
          name: scenario_template_id
          description: id шаблона сценария
          required: true
          schema:
            type: integer
      schemas:
        ApartmentTemplatesNotFound:
          type: object
          properties:
            detail:
              type: string
              example: ApartmentTemplates With id {apartment_template_id} Not Found!
  /admin/action_templates:
    get:
      operationId: admin-action-templates-list
      description: Получение списка шаблонов действий
      tags:
        - action_templates
      parameters:
        - $ref: '#/components/parameters/parameters-apartmentTemplateQueryId'
        - $ref: '#/components/parameters/sorting_query'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/MaxResultsQuery'
        - $ref: '#/components/parameters/GetAllQuery'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ScenarioTemplateWithDeviceId'
    post:
      operationId: admin-action-templates-create
      description: Создание шаблонов действий
      tags:
        - action_templates
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/CreateActionTemplate'
      responses:
        '201':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrieveActionTemplate'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApartmentTemplatesNotFound'
    delete:
      operationId: admin-multiple-action-templates-delete
      description: Удаление множества шаблонов действий
      tags:
        - action_templates
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/listOfIds'
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  detailed_rows:
                    type: array
                    items:
                      $ref: '#/components/schemas/RetrieveActionTemplate'
                  deleted_rows:
                    type: integer
                    example: 1
                    description: Кол-во удаленных шаблонов действий
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
    components:
      parameters:
        apartmentTemplateQueryId:
          in: query
          name: apartment_template_id
          description: id шаблона квартиры
          required: false
          schema:
            type: integer
      schemas:
        ApartmentTemplatesNotFound:
          type: object
          properties:
            detail:
              type: string
              example: ApartmentTemplates With id {apartment_template_id} Not Found!
  /admin/action_templates/{action_template_id}:
    get:
      operationId: admin-action-templates-retrieve
      description: Получение шаблона действия
      tags:
        - action_templates
      parameters:
        - $ref: '#/components/parameters/actionTemplateId'
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScenarioTemplateWithDeviceId'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    put:
      operationId: admin-action-templates-update
      description: Обновление шаблона действия
      tags:
        - action_templates
      parameters:
        - $ref: '#/components/parameters/actionTemplateId'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateActionTemplate'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveActionTemplate'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApartmentTemplatesNotFound'
    delete:
      operationId: admin-action-templates-delete
      description: Удаление шаблона действия
      tags:
        - action_templates
      parameters:
        - $ref: '#/components/parameters/actionTemplateId'
      responses:
        '204':
          description: Шаблон действия удален
        '400':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ValidationError'
        '403':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserPermissionError'
        '404':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotFound'
    components:
      parameters:
        actionTemplateId:
          in: path
          name: action_template_id
          description: id шаблона действия
          required: true
          schema:
            type: integer
      schemas:
        ApartmentTemplatesNotFound:
          type: object
          properties:
            detail:
              type: string
              example: ApartmentTemplates With id {apartment_template_id} Not Found!
  /admin/residences/{id}:
    put:
      operationId: update
      description: Обновляет объект резиденции
      tags:
        - residences
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateResidence'
      responses:
        '201':
          description: Успешное получение данных
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveResidence'
        '400':
          description: Изображение не найдено
        '404':
          description: Резиденция не найдена
    get:
      operationId: retrieve
      description: Получение резиденции по id
      tags:
        - residences
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Объект резиденции
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveResidence'
    delete:
      operationId: delete
      description: Удаляет резиденцию по id
      tags:
        - residences
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: Резиденция успешно удалена
        '404':
          description: Резиденция не существует
  /admin/residences:
    get:
      operationId: list
      description: Получение списка доступных резиденций
      tags:
        - residences
      parameters:
        - in: query
          name: page
          required: false
          schema:
            type: integer
        - in: query
          name: max_results
          required: false
          schema:
            type: string
        - in: query
          name: sort
          required: false
          schema:
            type: string
        - in: query
          name: search
          required: false
          schema:
            type: string
        - in: query
          name: create_dt_after
          required: false
          schema:
            type: string
        - in: query
          name: updated_dt_after
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Успешное получение списка резиденций
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrieveResidence'
    post:
      operationId: create
      description: Создание резиденции
      tags:
        - residences
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateResidence'
      responses:
        '201':
          description: Резиденция успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveResidence'
    delete:
      operationId: delete_multiple
      description: Множественное удаление резиденций по их id
      tags:
        - residences
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: string
                  description: список с id резиденций, которые требуется удалить
                  example: '[1,2,3,4]'
      responses:
        '200':
          description: Успешное удаление резиденций
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrieveResidence'
  /admin/residences_and_apartments:
    get:
      operationId: get_residences_and_apartments
      description: WARNING! GOVNOROUTE. Этот роут возвращает все резиденты доступные пользователю с апартаментами. Логика выдачи апартаментов - тайна за семью печатями
      tags:
        - residences
      responses:
        '200':
          description: Успешное получение резиденций с их апартаментами
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveResidenceWithApartments'
  /admin/residences/get_list_related_entities:
    get:
      operationId: get_list_related_entities
      description: Получение доступных резиденций и
      tags:
        - residences
      parameters:
        - in: path
          schema:
            type: integer
          name: residence_id
          required: true
      responses:
        '200':
          description: Успешное получение связанных с резиденцией данных
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/RetrieveResidence'
                properties:
                  controller_ids:
                    type: array
                    items:
                      type: integer
                  driver_ids:
                    type: array
                    items:
                      type: integer
                  room_ids:
                    type: array
                    items:
                      type: integer
                  scenario_ids:
                    type: array
                    items:
                      type: integer
                  device_ids:
                    type: array
                    items:
                      type: integer
        '400':
          description: Id Must Be An Integer!
  /admin/residences/{residence_id}/buildings:
    get:
      operationId: retrieve_buildings
      description: Отдаёт список строений принадлежащих резиденции. Доступно инженеру и выше
      tags:
        - residences
      parameters:
        - in: path
          name: residence_id
          required: true
          description: id резиденции
          schema:
            type: integer
      responses:
        '200':
          description: Успешно возвращает список зданий резиденции
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/BuildingSchema'
  /admin/residences_accesses/{pk}:
    post:
      operationId: multiple_create
      description: Множественное добавление доступов до резиденции
      tags:
        - residences
      parameters:
        - in: path
          name: pk
          description: id пользователя, у которого обновляется доступ
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChangeResidenceAccess'
      responses:
        '201':
          description: перечисленные доступы успешно добавленны
    delete:
      operationId: multiple_delete
      description: Множественное удаление доступов до резиденции
      tags:
        - residences
      parameters:
        - in: path
          name: pk
          description: id пользователя, у которого обновляется доступ
          required: true
          schema:
            type: integer
      responses:
        '201':
          description: перечисленные доступы успешно удалены
  /admin/integrator:
    post:
      operationId: create
      description: создаёт нового интегратора. Метод доступен с роли суперпользователя
      tags:
        - integrators
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - title
              properties:
                title:
                  type: string
                  description: Название интегратора
      responses:
        '200':
          description: Интегратор успешно создан
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveIntegrator'
    get:
      operationId: get_integrator
      description: Получить интегратора по произвольному полю. Метод доступен с ролью engeneer и выше
      tags:
        - integrators
      parameters:
        - in: query
          name: id
          required: false
          schema:
            type: integer
        - in: query
          name: title
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Успешное получение интегратора
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveIntegrator'
    delete:
      operationId: delete_integrator
      description: метод доступен только для суперпользователя
      tags:
        - integrators
      parameters:
        - in: path
          name: id
          schema:
            type: integer
          required: true
          description: id удаляемого интегратора
      responses:
        '200':
          description: Успешное удаление интегратора
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveIntegrator'
  /admin/integrators:
    get:
      operationId: get_integrators_paginated
      description: получить список всех интеграторов
      tags:
        - integrators
      parameters:
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/MaxResultsQuery'
        - $ref: '#/components/parameters/GetAllQuery'
      responses:
        '200':
          description: список интеграторов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrieveIntegrator'
    patch:
      description: Обновление полей интегратора. Метод доступен только суперпользователям
      tags:
        - integrators
      parameters:
        - in: query
          name: id
          required: false
          schema:
            type: integer
          description: id по которому будем обновлять интегратора
        - in: query
          name: title
          required: false
          schema:
            type: string
          description: title по которому будем обновлять интегратора
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                title:
                  type: string
      responses:
        '200':
          description: успешное обновление полей интегратора
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrieveIntegrator'
  /account_apartment_list_display_preferences:
    post:
      operationId: create_list_display_preferences
      tags:
        - preferences
      description: Создание преференса. Доступно пользователю и выше Достаёт доступные пользователю апартаменты
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                global_scenarios:
                  type: array
                  description: список с какими-то сценариями
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: id сценария
                      title:
                        type: string
                        description: название сценария
                global_security_order:
                  type: array
                  description: список хуй пойми с чем
                  items:
                    type: string
                rooms:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        description: id комнат наверное
      responses:
        '201':
          description: что-то произошло :/
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountApartmentListDisplayPreferences'
    get:
      operationId: retrieve_list_display_preferences
      description: Получение объекта. Доступно с ролью пользователя и выше. По id пользователя достаёт единственную сущность AccountApartmentListDisplayPreferences Итерируем данные апартаментов, лежащие в поле preferences полученного объекта Убираем все апартаменты из поля preferences, которые недоступны пользователю.
      responses:
        '200':
          description: Успешное получение объекта
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    description: id апартаментов
                  account_id:
                    type: integer
                    description: id некого аккаунта
                  updated_at:
                    type: string
                    format: date-time
                    example: '2022-02-14T11:59:37.945Z'
                  preferences:
                    type: array
                    items:
                      type: object
                      properties:
                        apartment_id:
                          type: integer
                        displayed_title:
                          type: string
  /account_apartment_list_display_preferences/{pk}:
    put:
      operationId: update_list_display_preferences
      description: Доступно юзеру и выше. Достаёт доступные апартаменты. Проверяет может ли пользователь изменить преференсы (может, если ему доступна резиденция). иначе выплёвывает UserPermissionError. В случае успеха обновляет json поле preferences в AccountApartmentListDisplayPreferences
      tags:
        - preferences
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  apartment_id:
                    type: integer
                  displayed_title:
                    type: string
                  displayed_image_hash:
                    type: string
                  displayed_image_id:
                    type: integer
      responses:
        '200':
          description: Обновлённый объект AccountApartmentListDisplayPreferences
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountApartmentListDisplayPreferences'
        '404':
          description: Не могу найти >_<
    delete:
      operationId: delete_list_display_preferences
      tags:
        - preferences
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: удаление произведено
        '404':
          description: удаляемый объект не найден
  /account_apartment_preferences:
    post:
      operationId: create_account_apartment_preferences
      description: Достаёт объект AccountApartmentPreferences. Создаёт новый преференс, если его не существует
      tags:
        - preferences
      parameters:
        - in: query
          name: room_group_support
          description: ни малейшего понимания
          required: false
          schema:
            type: boolean
        - in: query
          name: apartment_id
          description: id апартаментов, в которых мы создаём преференсы
          required: false
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountApartmentPreferences'
      responses:
        '201':
          description: Успешное создание чего-то
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountApartmentPreferencesModel'
    get:
      operationId: retrieve_account_apartment_preferences
      tags:
        - preferences
      parameters:
        - in: query
          name: room_group_support
          description: ни малейшего понимания
          required: false
          schema:
            type: boolean
        - in: query
          name: apartment_id
          description: id апартаментов, в которых мы создаём преференсы
          required: false
          schema:
            type: integer
      responses:
        '200':
          description: успешное получение преференсов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountApartmentPreferencesModel'
        '400':
          description: type of apartment_id must be integer
  /account_apartment_preferences/{pk}:
    put:
      operationId: update_account_apartment_preferences
      tags:
        - preferences
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
        - in: query
          name: room_group_support
          required: false
          schema:
            type: boolean
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountApartmentPreferencesModel'
      responses:
        '200':
          description: успешное обновление преференсов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountApartmentPreferencesModel'
    delete:
      operationId: delete_account_apartment_preferences
      tags:
        - preferences
      description: удаление объекта AccountApartmentPreferences
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: успешное удаление
        '404':
          description: успешное удаление AccountApartmentPreferences
  /account_apartment_preferences/update_room_group_order/{preference_id}:
    put:
      operationId: update_room_groups_order
      parameters:
        - in: path
          name: preference_id
          required: true
          schema:
            type: integer
        - in: query
          name: room_group_support
          required: false
          schema:
            type: boolean
        - in: query
          name: apartment_id
          required: true
          schema:
            type: integer
      tags:
        - preferences
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                group_order:
                  type: array
                  items:
                    type: string
                  example:
                    - 2 этаж
                    - 1 этаж
                room_groups:
                  type: object
                  example:
                    2 этаж:
                      - id: 735
                      - id: 733
                      - id: 1417
                    1 этаж:
                      - id: 736
                    'null':
                      - id: 2803
                      - id: 1415
                      - id: 2888
                global_scenarios:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                      title:
                        type: string
                    example:
                      id: 4292
                      title: Хобби, спорт, развл.
                global_security_order:
                  type: array
                  items:
                    type: string
      responses:
        '200':
          description: успешное изменение порядка преференсов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountApartmentPreferencesModel'
        '404':
          description: Account Apartment Preferences Not Found!
  /account_apartment_preferences/delete_room_groups/{pk}:
    delete:
      operationId: delete_room_groups
      description: доступно с ролью пользователя и выше
      tags:
        - preferences
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountApartmentPreferences'
      responses:
        '200':
          description: успешное изменение порядка преференсов
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountApartmentPreferencesModel'
  /account_apartment_preferences/set_default:
    post:
      operationId: set_default_apartment_preferences
      tags:
        - preferences
      parameters:
        - in: query
          name: apartment_id
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountApartmentPreferencesModel'
  /account_apartment_preferences/get_default:
    get:
      operationId: get_default_apartment_preferences
      parameters:
        - in: query
          name: apartment_id
          schema:
            type: integer
      tags:
        - preferences
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountApartmentPreferencesModel'
  /admin/account_apartment_default_preferences:
    post:
      operationId: create_account_apartment_default_preferences
      tags:
        - preferences
      parameters:
        - in: query
          description: id апартаментов, для которых устанавливаем преференсы
          required: true
          name: apartment_id
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountApartmentPreferences'
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  apartment_id:
                    type: integer
                  updated_at:
                    type: string
                    format: date-time
                  preferences:
                    type: object
                    nullable: true
    get:
      operationId: retrieve_account_apartment_default_preferences
      tags:
        - preferences
      parameters:
        - in: query
          name: apartment_id
          description: id апартаментов, для которых получаем преференсы
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountApartmentPreferencesModel'
  /admin/account_apartment_default_preferences/{default_preference_id}:
    put:
      operationId: update_account_apartment_default_preferences
      tags:
        - preferences
      parameters:
        - in: path
          name: default_preference_id
          required: true
          schema:
            type: integer
        - in: query
          name: apartment_id
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                global_scenarios:
                  type: array
                  example: []
                global_security_order:
                  type: array
                  example: []
                group_order:
                  type: array
                  items:
                    type: string
                  example:
                    - private
                    - common
                room_groups:
                  type: object
                  example:
                    'null': []
                    common:
                      - id: common_room_id
                    private:
                      - id: private_room_id
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountApartmentDefaultPreferencesModel'
        '404':
          description: Account Apartment Default Preferences Not Found!
    delete:
      operationId: delete_account_apartment_default_preferences
      tags:
        - preferences
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: success
        '404':
          description: Account Apartment Default Preferences Not Found!
  /admin/account_apartment_default_preferences/update_room_groups_order/{pk}:
    put:
      operationId: update_room_groups_order
      tags:
        - preferences
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountApartmentPreferences'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccountApartmentPreferencesModel'
        '404':
          description: Account Apartment Default Preferences Not Found!
  /admin/account_apartment_default_preferences/delete_room_groups/{pk}:
    delete:
      operationId: delete_room_groups
      tags:
        - preferences
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountApartmentPreferencesModel'
      responses:
        '200':
          description: |2-
             — Кто тебе дом строил? Здорово получилось… — Да пидорасы! — ?? — Нанял рабочих залить фундамент. Выкопали, залили, ушли. Нанял каменщиков, те пришли спрашивают: Какие пидорасы фундамент заливали? Стены выложили, ушли. Нанял штукатуров, те тоже — что за пидорасы кладку делали? Ну, и так далее. Вот и получается, что дом строили одни пидорасы… 
            pidoras architecture pattern
  /admin/apartments/{apartment_id}:
    get:
      operationId: apartments_retrieve
      tags:
        - apartments
      parameters:
        - in: path
          name: apartment_id
          required: true
          schema:
            type: integer
          example: 1
      description: По сути retrieve метод на получение апартаментов и всего, что в них имеется. Нужно вынести в отдельный роут инфу о контроллере, овнерах и тп
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  apartment_number:
                    type: integer
                  apartment_type_id:
                    type: integer
                  floor_number:
                    type: integer
                  residence_id:
                    type: integer
                  created_at:
                    type: string
                    format: date-time
                  updated_at:
                    type: string
                    format: date-time
                  building_id:
                    type: integer
                  comment:
                    type: string
                  accounts:
                    type: array
                    items:
                      $ref: '#/components/schemas/Accounts'
                  controller:
                    $ref: '#/components/schemas/RetrieveController'
                  rooms:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApartmentRooms'
                  scenarios:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApartmentsScenarioWithActions'
                  devices:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApartmentDevices'
                  drivers:
                    description: набор драйверов апартаментов
                    type: array
                    items:
                      $ref: '#/components/schemas/RetrieveDriver'
                  capabilities:
                    type: array
                    items:
                      $ref: '#/components/schemas/ApartmentCapabilities'
    delete:
      description: удаляет апартаменты. Метод доступен с ролью админа и выше. Апартаменты можно удалить только в случае, если у пользователя есть доступ до апартаментов
      operationId: apartments_delete
      tags:
        - apartments
      parameters:
        - in: path
          name: apartment_id
          description: id удаляемых апартаментов
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: успешное удаление
        '403':
          description: UserPermissionError
        '404':
          description: апартаменты не найдены
    put:
      operationId: apartments_update
      description: Доступно с ролью админа и выше.
      tags:
        - apartments
      parameters:
        - in: path
          name: apartment_id
          description: id изменяемых апартаментов
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateApartment'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApartmentWithAccounts'
        '400':
          description: EntityAlreadyExists
        '403':
          description: UserPermissionError
        '404':
          description: NotFound
  /admin/apartments:
    get:
      operationId: apartments_list
      tags:
        - apartments
      parameters:
        - $ref: '#/components/parameters/sorting_query'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/MaxResultsQuery'
        - $ref: '#/components/parameters/GetAllQuery'
        - $ref: '#/components/parameters/search_query'
        - in: query
          name: flor_number
          description: фильтрация по номерам этажей
          schema:
            type: array
            items:
              type: integer
        - in: query
          name: residence_id
          description: id резиденций, в которых производим поиск апартов
          schema:
            type: array
            items:
              type: integer
        - in: query
          name: building_ids
          description: список строений, внутри которых ищем апартаменты
          deprecated: true
          schema:
            type: array
            items:
              type: integer
        - in: query
          name: apartment_type_ids
          description: фильтрация по типам апартов
          schema:
            type: array
            items:
              type: integer
        - in: query
          name: created_dt_after
          description: noqa
          schema:
            type: string
            format: date-time
        - in: query
          name: updated_dt_after
          description: noqa
          schema:
            type: string
            format: date-time
        - in: query
          name: created_dt_from
          description: noqa
          schema:
            type: string
            format: date-time
        - in: query
          name: updated_dt_from
          description: noqa
          schema:
            type: string
            format: date-time
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApartmentWithAccounts'
    post:
      operationId: apartments_create
      tags:
        - apartments
      description: создание апартаментов. Доступно с ролью админа и выше
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApartment'
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveCreatedApartment'
        '400':
          description: EntityAlreadyExists
    delete:
      operationId: apartments_delete_multiple
      tags:
        - apartments
      description: удаляет несколько апартаментов
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  description: список с id удаляемых апартаментов
                  type: array
                  items:
                    type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                description: кол-во удалённых строк
                type: integer
        '403':
          description: UserPermissionError
  /admin/apartments/get_list_related_entities:
    get:
      operationId: get_list_related_entities
      tags:
        - apartments
      description: Доступно с ролью инженера и выше. Возвращает связанные с
      parameters:
        - in: query
          name: apartment_id
          description: вообще, это список. Элементы разделяются символом "+"
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  controller_ids:
                    type: array
                    items:
                      id: null
                      type: integer
                      example: 1
                  driver_ids:
                    type: array
                    items:
                      id: null
                      type: integer
                      example: 1
                  room_ids:
                    type: array
                    items:
                      id: null
                      type: integer
                      example: 1
                  scenario_ids:
                    type: array
                    items:
                      id: null
                      type: integer
                      example: 1
                  device_ids:
                    type: array
                    items:
                      id: null
                      type: integer
                      example: 1
        '400':
          description: Id Must Be An Integer! Ошибка валидации
  /admin/apartments/change_residence_id/{apartment_id}:
    post:
      operationId: change_residence_id
      description: Доступно инженеру и выше. Должно быть частью логики обновления апартаментов. Привязывает апартаменты и связанные данные к новой резиденции
      tags:
        - apartments
      parameters:
        - in: path
          description: id апартаментов, чью резиденцию меняем
          required: true
          name: apartment_id
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - residence_id
              properties:
                residence_id:
                  description: id новой резиденции
                  type: integer
                  required: true
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApartmentSchema'
        '404':
          description: NotFound
  /admin/apartments_types/list:
    get:
      operationId: apartments_types_list
      tags:
        - apartments
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                    label:
                      type: string
                    label_eng:
                      type: string
  /admin/apartments/clone/{apartment_id}:
    post:
      operationId: clone_apartments
      tags:
        - apartments
      description: Позволяет создать копию апартаментов с возможностью изменить название, этаж, тип помещения, номер здания и комментарий
      parameters:
        - in: path
          name: apartment_id
          description: id апартаментов, которые необходимо клонировать
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneApartmentSchema'
      responses:
        '201':
          description: Success
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  apartment_number:
                    type: string
                  apartment_type_id:
                    type: integer
                  floor_number:
                    type: integer
                  residence_id:
                    type: integer
                  created_at:
                    type: string
                    format: date-time
                  updated_at:
                    type: string
                    format: date-time
                  building_id:
                    type: integer
                  comment:
                    type: string
        '404':
          description: NotFound
  /admin/apartment_templates/create_apartment/{template_id}:
    post:
      operationId: create_apartments_from_template
      tags:
        - apartments
      description: создание апартаментов на основе шаблона
      parameters:
        - in: path
          name: template_id
          description: id шаблона
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateApartmentFromTemplate'
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveCreatedApartment'
        '400':
          description: NotFound
  /apartments/{apartment_id}:
    get:
      operationId: retrieve_user_apartment
      tags:
        - apartments
        - preferences
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                allOf:
                  - $ref: '#/components/schemas/RetrieveApartmentDublicate1'
                  - $ref: '#/components/schemas/RetrieveApartments'
                properties:
                  etag:
                    description: без понятия
                  owners:
                    description: люди у которых есть доступ до апартамента
                    type: array
                    items:
                      type: object
                      properties:
                        owner_id:
                          type: integer
                        first_name:
                          type: string
                        last_name:
                          type: string
                        middle_name:
                          type: string
                  residence_title:
                    type: string
                  drivers:
                    type: array
                    items:
                      type: object
                  meta:
                    type: object
                    properties:
                      apartments_count:
                        type: string
                      global_security_order:
                        type: array
                        items:
                          type: string
                      broker_remote_access:
                        type: object
                        properties:
                          host:
                            type: string
                            example: dev.cloud.simple-home.liis.su
                          access_token:
                            type: string
                            example: bGlpcy1icm9rZXI6cGVyaW9kaWNhbGx5X2dlbmVyYXRlX2NvbXBsaWNhdGVkX3Bhc3N3b3Jk
  /admin/retrieve_user_by_contact:
    get:
      operationId: retrieve_user_by_contact
      tags:
        - users
      description: Получение пользователя по email или phone_number. Используется в форме предоставления прав доступа.
      parameters:
        - in: query
          name: email
          description: Email пользователя. Обязательный, если phone_number не был передан.
          required: false
          schema:
            type: string
            example: test1@liis.su
        - in: query
          name: phone_number
          description: Phone_number пользователя. Обязательный, если email не был передан. Номер телефона должен должен начинаться либо с символа '+', либо с символа '8'
          required: false
          schema:
            type: string
            example: '+71234567891'
      responses:
        '200':
          description: Пользователь найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveUser'
        '400':
          content:
            application/json:
              schema:
                oneOf:
                  - type: object
                    properties:
                      detail:
                        type: string
                        example: Neither phone_number or email was provided!
                  - type: object
                    properties:
                      detail:
                        type: string
                        example: Wrong phone number format
                  - type: object
                    properties:
                      detail:
                        type: string
                        example: Wrong phone number format
                  - type: object
                    properties:
                      detail:
                        type: string
                        example: User not exists!
  /admin/users/{pk}:
    get:
      operationId: admin_user_retrieve
      description: доступен инженеру и выше
      tags:
        - users
      parameters:
        - in: path
          name: pk
          description: id пользователя
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveUserWithAccountResidence'
        '404':
          description: Not found
    delete:
      description: Доступен администратору и выше.
      tags:
        - users
      operationId: admin_user_delete
      parameters:
        - in: path
          name: pk
          description: id пользователя
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '204':
          description: Успешное удаление
        '403':
          description: В доступе отказанно
    patch:
      description: доступно инженеру и выше
      operationId: admin_user_update
      tags:
        - users
      parameters:
        - in: path
          name: pk
          required: true
          description: id пользователя
          schema:
            type: integer
            example: 1
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveUser'
  /admin/login:
    post:
      operationId: admin_login
      tags:
        - auth
      parameters:
        - in: header
          name: X-Schema
          schema:
            type: string
            example: public
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                email:
                  type: string
                client_unique_id:
                  type: string
      responses:
        '200':
          description: Успешная авторизация
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessAdminLoginResponse'
  /admin/users/all_user_phones:
    get:
      description: Возвращает список всех номеров телефонов. Доступен инженеру и выше. Данный метод не является безопасным. Постарайтесь от него избавиться
      deprecated: true
      operationId: all_user_phones
      tags:
        - users
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  description: номера телефонов
  /users/registration:
    post:
      operationId: registration
      description: Регистрирует нового пользователя. Сервис sh отправляет код подтверждения регистрации сообщением на email
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - phone_number
              properties:
                email:
                  type: string
                phone_number:
                  type: string
                language:
                  type: string
                  enum:
                    - ru
                    - en
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    default: OK
                  expire:
                    type: integer
                    description: время жизни кода подтверждения
  /users/get_allowed_auth_method:
    get:
      operationId: get_allowed_auth_method
      description: получить список всех доступным способов авторизации
      tags:
        - users
        - auth
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  country_name:
                    type: string
                  city_name:
                    type: string
                  country_code:
                    type: integer
                  allowed_countries_codes:
                    description: список с поддерживаемыми номерами стран по стандарту iso
                    type: array
                    items:
                      type: integer
                  is_sms_auth_allowed:
                    type: boolean
                    description: разрешёны ли в стране того, кто запрашивает смс сообщения.
  /users/registration/confirm:
    post:
      operationId: confirm_registration
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - email_code
              properties:
                email:
                  type: string
                  maxLength: 256
                  format: email
                  pattern: \.[Ii][Oo]$
                email_code:
                  type: integer
                  minimum: 1000
                  maximum: 9999
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveUser'
        '401':
          description: code not found
  /users/login:
    post:
      operationId: user_login
      description: Авторизация пользователя. Отправляем код подтверждения
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                phone_number:
                  type: string
      responses:
        '203':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessLoginResponse'
  /users/login_email:
    post:
      operationId: login_using_email
      description: Авторизация пользователя при помощи email. Отправляем код подтверждения
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  maxLength: 256
              required:
                - email
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessLoginResponse'
  /users/confirm_code:
    post:
      operationId: confirm_code
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - phone_number
                - sms_code
                - client_unique_id
              properties:
                phone_number:
                  type: string
                  minLength: 11
                  maxLength: 16
                sms_code:
                  type: integer
                  minimum: 1000
                  maximum: 9999
                client_unique_id:
                  type: string
                  maxLength: 64
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfirmCode'
  /users/confirm_email_code:
    post:
      operationId: confirm_email_code
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              properties:
                email:
                  type: string
                  example: test1@liis.su
                email_code:
                  type: integer
                  example: 8888
                client_unique_id:
                  type: string
                  example: 0e63081028d455931
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfirmCode'
  /users/refresh_token_new:
    post:
      operationId: refresh_token_new
      description: Запрос нового  токена доступа используя токен обновления
      tags:
        - auth
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Предыдущий refresh token
              properties:
                refresh_token:
                  type: string
      responses:
        '200':
          description: Данные пользователя
          content:
            application/json:
              schema:
                type: object
                properties:
                  prefix:
                    type: string
                  refresh_token:
                    type: string
                  token:
                    type: string
                  exp_time:
                    type: string
                    description: время жизни токена
                  refresh_exp_time:
                    type: string
                    description: время жизни рефреш токена
                  accessible_schemas:
                    type: string
  /user_details:
    get:
      operationId: user_details
      description: Доступен для пользователя и выше. По сути retrieve метод на самого себя.
      tags:
        - users
      parameters:
        - in: query
          name: apartment_id
          description: id апартаментов
          schema:
            type: integer
      responses:
        '200':
          description: Отдаёт информацию
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveUser'
  /users/{pk}:
    delete:
      operationId: users_delete
      tags:
        - users
      description: Доступно пользователю и выше. Данный метод позволяет удалить пользователя, который вызвал данный метод ._.
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: success
        '404':
          description: невозможно, но это же симплхом. На бэкенде эта логика прописана
  /user_info:
    get:
      operationId: user_info
      tags:
        - users
      deprecated: true
      description: Дубликат метода user_details. Логику методов требуется объекдинить
      parameters:
        - in: query
          name: user_id
          required: true
          description: id пользователя по которому достаём инфу
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveUser'
  /user_by_phone_number:
    post:
      operationId: get_or_create_by_phone_number
      description: Метод находит пользователя по номеру телефона, возвращает. Если пользователя не существует - создаёт его ._.
      deprecated: true
      parameters:
        - in: query
          name: phone_number
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveUser'
  /clients:
    get:
      tags:
        - user_session
      operationId: clients_list
      description: Доступно саппорту и выше
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrieveClient'
    post:
      tags:
        - user_session
      operationId: clients_create
      description: Создание клиента
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientsCreateSchema'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveClient'
    delete:
      tags:
        - user_session
      operationId: clients_multiple_delete
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: array
                  description: список с id удаляемый сессий
                  items:
                    type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  description: сколько клиентов было удалено
                  type: integer
        '400':
          description: Id Must Be An Integer!
        '403':
          description: Not enoth permisssions!
  /clients/{pk}:
    get:
      tags:
        - user_session
      operationId: clients_retrieve
      parameters:
        - in: path
          description: id сессии
          name: pk
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveClient'
        '404':
          description: Client not Found
    delete:
      tags:
        - user_session
      operationId: clients_delete
      description: удаление сессии пользователя
      parameters:
        - in: path
          description: id сессии
          name: pk
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: success
    patch:
      tags:
        - user_session
      operationId: clients_patch
      description: 'Обновление сессии. Пользователь не может изменять  Поля: account_id os created_at updated_at unique_id device_model device_name'
      parameters:
        - in: path
          description: id сессии
          name: pk
          required: true
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: integer
                os_version:
                  type: string
                push_token:
                  type: string
                auth_token:
                  type: string
                refresh_token:
                  type: string
                refresh_exp_time:
                  type: number
                auth_exp_time:
                  type: number
                last_apartment:
                  type: string
                source:
                  type: string
                ip_address:
                  type: string
                ip_location_country:
                  type: string
                ip_location_city:
                  type: string
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveClient'
  /client_by_unique_id:
    get:
      tags:
        - user_session
      operationId: client_by_unique_id
      parameters:
        - in: query
          name: unique_id
          required: true
          schema:
            type: string
        - in: query
          name: account_id
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  push_token:
                    type: string
                    description: без понятия что это. Возможно токен для пуш нотификаций
  /admin/clients:
    delete:
      tags:
        - admin_session
      operationId: multiple_delete_client_session_admin
      description: Удаление множества клиентов (сессий пользователей) админом
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: array
                  items:
                    type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                description: кол-во удалённого дерьма
                type: integer
    post:
      tags:
        - admin_session
      operationId: create_client_session_admin
      description: Создание клиентов (сессий пользователей) админом
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ClientsCreateSchema'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveClient'
          description: Созданный клиент
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  error_type:
                    type: string
                    example: ENTITY_ALREADY_EXISTS
                  detail:
                    type: string
                    example: Entity Already Exists!
          description: Такой клиент уже существует
  /admin/clients/{pk}:
    get:
      operationId: admin_clients_retrieve
      description: Получение списка клиентов
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveClient'
    delete:
      operationId: admin_clients_delete
      description: удаляет сессию пользователя. Доступно саппорту и выше
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: success
    patch:
      operationId: admin_clients_patch
      description: Доступно саппорту и выше
      parameters:
        - in: path
          required: true
          name: pk
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - unique_id
              properties:
                account_id:
                  type: integer
                push_token:
                  type: string
                  maxLength: 256
                os:
                  type: string
                  maxLength: 32
                os_version:
                  type: string
                  maxLength: 32
                device_name:
                  type: string
                  maxLength: 64
                device_model:
                  type: string
                  maxLength: 64
                unique_id:
                  type: string
                  maxLength: 64
                auth_token:
                  type: string
                  maxLength: 256
                refresh_token:
                  type: string
                  maxLength: 25
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveClient'
  /admin/admin-clients/{pk}:
    get:
      tags:
        - admin_session
      operationId: retrieve_admin_clients
      description: Доступно инженеру и выше. Возвращает текущую сессию пользователя
      parameters:
        - in: path
          name: pk
          required: true
          schema:
            type: integer
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  account_id:
                    type: integer
  /admin/client_by_unique_id:
    get:
      tags:
        - admin_session
      operationId: admin_clients_client_by_unique_id
      description: Получение клиента по unique_id
      parameters:
        - in: query
          name: email
          required: true
          schema:
            type: string
        - in: query
          name: unique_id
          required: true
          schema:
            type: string
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                  account_id:
                    type: integer
  /admin/scenarios:
    get:
      tags:
        - scenarios
      operationId: admin_list_scenarios
      description: возвращает пагинированный список сценариев
      parameters:
        - in: query
          name: type
          description: тип сценария, глобальный или локальный (что бы это не значило)
          schema:
            type: string
            enum:
              - global
              - local
        - $ref: '#/components/parameters/sorting_query'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/MaxResultsQuery'
        - $ref: '#/components/parameters/GetAllQuery'
        - $ref: '#/components/parameters/search_query'
        - $ref: '#/components/parameters/CreateBeforeFilter'
        - $ref: '#/components/parameters/CreateAfterFilter'
        - $ref: '#/components/parameters/UpdateBeforeFilter'
        - $ref: '#/components/parameters/UpdateAfterFilter'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrieveScenarioWithActions'
        '404':
          description: not found
    post:
      tags:
        - scenarios
      operationId: admin_scenario_create
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScenario'
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveScenarioWithActions'
    delete:
      tags:
        - scenarios
      operationId: admin_multiple_delete
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                type:
                  type: array
                  description: id удаляемых сценариев
                  items:
                    type: integer
      responses:
        '200':
          description: успешное удаление
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrieveScenario'
  /admin/scenarios/{pk}:
    get:
      tags:
        - scenarios
      operationId: admin_scenarios_retrieve
      parameters:
        - in: path
          required: true
          name: pk
          description: id сценария, над которым производится действие
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveScenarioWithActions'
    delete:
      tags:
        - scenarios
      operationId: admin_scenarios_delete
      parameters:
        - in: path
          required: true
          name: pk
          description: id сценария, над которым производится действие
          schema:
            type: integer
      responses:
        '204':
          description: success
        '403':
          description: not allowed
    put:
      tags:
        - scenarios
      operationId: admin_scenarios_update
      parameters:
        - in: path
          required: true
          name: pk
          description: id сценария, над которым производится действие
          schema:
            type: integer
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveScenario'
  /admin/scenarios/set_room_relations:
    post:
      tags:
        - scenarios
      operationId: set_room_relations
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                room_id:
                  type: integer
                  example: 50
                scenario_ids:
                  type: array
                  example:
                    - 11
                    - 13
                  items:
                    type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                description: кол-во обновлённых объектов
                type: integer
  /admin/scenarios/set_global:
    post:
      operationId: scenarios_set_global
      tags:
        - scenarios
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - scenario_ids
              properties:
                scenario_ids:
                  type: array
                  example:
                    - 11
                    - 13
                  items:
                    type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                description: кол-во обновлённых объектов
                type: integer
  /admin/scenarios/set_apartment_relations:
    post:
      operationId: scenarios_set_apartment_relations
      tags:
        - scenario
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - apartment_id
                - scenario_ids
              properties:
                apartment_id:
                  type: integer
                  example: 1
                scenario_ids:
                  type: array
                  example:
                    - 39
                  items:
                    type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                description: кол-во обновлённых объектов
                type: integer
  /admin/scenarios/get_action_ids:
    get:
      operationId: scenarios_get_action_ids
      tags:
        - scenario
      parameters:
        - in: query
          name: scenario_id
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  action_ids:
                    type: array
                    items:
                      type: integer
  /admin/scenarios/clone/{pk}:
    post:
      operationId: scenario_clone
      description: доступно инженеру и выше
      tags:
        - scenario
      parameters:
        - in: path
          required: true
          name: pk
          schema:
            type: integer
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveScenarioWithActions'
        '404':
          description: Not found
  /scenarios:
    get:
      operationId: scenario_list
      tags:
        - scenario
      parameters:
        - in: query
          name: global
          schema:
            type: boolean
            example: true
        - in: query
          name: apartment_id
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveScenarioWithActions'
    post:
      operationId: scenario_create
      tags:
        - scenario
      parameters:
        - in: query
          name: apartment_id
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateScenario'
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveScenario'
    delete:
      operationId: multiple-scenario-delete
      tags:
        - scenario
      parameters:
        - in: query
          name: apartment_id
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: array
                  example:
                    - 1
                    - 2
                  items:
                    type: integer
      responses:
        '204':
          description: success
  /scenarios/{pk}:
    get:
      operationId: scenario_retrieve
      tags:
        - scenario
      parameters:
        - in: path
          required: true
          name: scenario_id
          schema:
            type: integer
        - in: query
          name: apartment_id
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveScenarioWithActions'
    delete:
      operationId: scenario_delete
      tags:
        - scenario
      parameters:
        - in: path
          name: apartment_id
          required: true
          schema:
            type: integer
        - in: query
          name: scenario_id
          schema:
            type: integer
      responses:
        '204':
          description: success
    put:
      operationId: scenario-update
      tags:
        - scenario
      parameters:
        - in: path
          required: true
          name: scenario_id
          schema:
            type: integer
        - in: query
          name: apartment_id
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveScenarioWithActions'
  /scenarios/activate/{pk}:
    post:
      operationId: run-scenario
      tags:
        - scenario
      parameters:
        - in: path
          required: true
          name: scenario_id
          schema:
            type: integer
        - in: query
          name: apartment_id
          schema:
            type: integer
      responses:
        '204':
          description: success
  /scenarios/set_actions/{pk}:
    post:
      operationId: set-actions
      tags:
        - scenario
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
                properties:
                  capability_id:
                    type: integer
                    example: 19
                  value:
                    type: string
                    example: '1'
                  residence_id:
                    type: integer
                    example: 1
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 104
                    scenario_id:
                      type: integer
                      example: 31
                    capability_id:
                      type: integer
                      example: 19
                    value:
                      type: string
                      example: '1'
                    residence_id:
                      type: integer
                      example: 1
                    updated_at:
                      type: string
                      format: date-time
                      example: '2021-02-19T09:56:27.866057+00:00'
  /admin/actions:
    get:
      operationId: admin_actions_list
      tags:
        - actions
      parameters:
        - in: query
          name: scenario_id
          schema:
            type: integer
        - $ref: '#/components/parameters/sorting_query'
        - $ref: '#/components/parameters/PageQuery'
        - $ref: '#/components/parameters/MaxResultsQuery'
        - $ref: '#/components/parameters/GetAllQuery'
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RetrieveAction'
    post:
      operationId: admin_actions_create
      tags:
        - actions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              required:
                - scenario_id
                - capability_id
                - value
                - residence_id
              allOf:
                - $ref: '#/components/schemas/RetrieveAction'
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveAction'
    delete:
      operationId: multiple_admin_actions_delete
      tags:
        - actions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  type: array
                  items:
                    type: integer
      responses:
        '204':
          description: success
  /admin/actions/{pk}:
    get:
      operationId: admin_actions_retrieve
      tags:
        - actions
      parameters:
        - in: path
          required: true
          name: pk
          schema:
            type: integer
      responses:
        '200':
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveAction'
    delete:
      operationId: admin_actions_delete
      tags:
        - actions
      parameters:
        - in: path
          required: true
          name: pk
          schema:
            type: integer
      responses:
        '204':
          description: success
    put:
      operationId: admin_actions_update
      tags:
        - actions
      parameters:
        - in: path
          required: true
          name: pk
          schema:
            type: integer
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RetrieveAction'
      responses:
        '201':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RetrieveAction'
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  parameters:
    apartmentId:
      in: path
      name: apartment_id
      description: id апартамента
      required: true
      schema:
        type: integer
    demoAccessId:
      in: path
      name: demo_access_id
      description: id демо доступа
      required: true
      schema:
        type: integer
    imageId:
      in: path
      name: image_id
      description: id изображения
      required: true
      schema:
        type: integer
    sorting_query:
      in: query
      name: sort
      required: false
      description: Принимает имя поля, по которому необходимо выполнить сортировку. Для изменения порядка сортировки, перед именем поля вставляется символ "-".
      schema:
        type: string
        example: '-id'
    notificationId:
      in: path
      name: notification_id
      description: id уведомления
      required: true
      schema:
        type: integer
    PageQuery:
      in: query
      name: page
      required: false
      schema:
        type: integer
    MaxResultsQuery:
      in: query
      name: max_results
      required: false
      schema:
        type: string
    GetAllQuery:
      in: query
      name: get_all
      schema:
        type: boolean
        default: false
    AutomationPathId:
      in: path
      name: automation_id
      description: id автоматизации
      required: true
      schema:
        type: integer
    AutomationTriggerPathId:
      in: path
      name: automation_trigger_id
      description: id триггера автоматизации
      required: true
      schema:
        type: integer
    AutomationActionPathId:
      in: path
      name: automation_action_id
      description: id действия автоматизации
      required: true
      schema:
        type: integer
    CreateBeforeFilter:
      in: query
      name: created_before_date
      required: false
      schema:
        type: string
        example: 2023-03-02 13:22:06.993476%2B00:00
    CreateAfterFilter:
      in: query
      name: created_after_date
      required: false
      schema:
        type: string
        example: 2023-03-02 13:22:06.993476%2B00:00
    UpdateBeforeFilter:
      in: query
      name: updated_before_date
      required: false
      schema:
        type: string
        example: 2023-03-02 13:22:06.993476%2B00:00
    UpdateAfterFilter:
      in: query
      name: updated_after_date
      required: false
      schema:
        type: string
        example: 2023-03-02 13:22:06.993476%2B00:00
    Required:
      in: query
      name: residence_id
      required: true
      schema:
        type: integer
        example: 1
    apartmentTemplateId:
      in: path
      name: apartment_template_id
      description: id шаблона квартиры
      required: true
      schema:
        type: integer
    apartmentTemplateQueryId:
      in: query
      name: apartment_template_id
      description: id шаблона квартиры
      required: true
      schema:
        type: integer
    roomTemplateId:
      in: path
      name: room_template_id
      description: id шаблона комнаты
      required: true
      schema:
        type: integer
    search_query:
      in: query
      name: search
      required: false
      schema:
        type: string
    driverTemplateId:
      in: path
      name: driver_template_id
      description: id шаблона драйвера
      required: true
      schema:
        type: integer
    parameters-apartmentTemplateQueryId:
      in: query
      name: apartment_template_id
      description: id шаблона квартиры
      required: false
      schema:
        type: integer
    driverTemplateQueryId:
      in: query
      name: driver_template_ids
      description: id шаблона драйвера
      required: false
      schema:
        type: string
    roomTemplateQueryId:
      in: query
      name: room_template_ids
      description: id шаблона комнаты
      required: false
      schema:
        type: string
    typeQueryId:
      in: query
      name: type
      description: Тип устройства. Обязательный параметр, если subtype указан
      required: false
      schema:
        type: string
    subtypeQueryId:
      in: query
      name: subtype
      description: Подтип устройства
      required: false
      schema:
        type: string
    deviceTemplateId:
      in: path
      name: device_template_id
      description: id шаблона устройства
      required: true
      schema:
        type: integer
    capabilityTemplateId:
      in: path
      name: capability_template_id
      description: id шаблона навыка
      required: true
      schema:
        type: integer
    type:
      in: query
      name: type
      description: Тип сценария. Может быть либо global либо local
      required: false
      schema:
        type: string
        example: global
    roomTemplateIds:
      in: query
      name: room_template_ids
      description: ids шаблонов сценариев
      required: false
      schema:
        type: string
        example: 1, 2, 3
    scenarioTemplateId:
      in: path
      name: scenario_template_id
      description: id шаблона сценария
      required: true
      schema:
        type: integer
    actionTemplateId:
      in: path
      name: action_template_id
      description: id шаблона действия
      required: true
      schema:
        type: integer
  schemas:
    RetrieveDemoAccess:
      type: object
      required:
        - id
        - demo_duration_days
        - demo_start_day
        - demo_days_left
        - apartment_id
        - is_access_active
      properties:
        id:
          type: integer
          nullable: false
        demo_duration_days:
          type: integer
          minimum: 1
          nullable: false
        demo_start_day:
          type: string
          format: date
          nullable: true
        demo_days_left:
          type: integer
          nullable: true
        apartment_id:
          type: integer
          nullable: false
        is_access_active:
          type: boolean
          nullable: false
    CreateDemoAccess:
      type: object
      required:
        - demo_duration_days
        - apartment_id
      properties:
        demo_duration_days:
          type: integer
          minimum: 1
          example: 30
          nullable: false
        apartment_id:
          type: integer
          nullable: false
          example: 1888
    DemoAccessUpdateForbidden:
      type: object
      properties:
        error_type:
          type: string
          nullable: false
          example: VALIDATION_ERROR
        detail:
          type: string
          nullable: false
          example: Запрещено изменять демо доступы после начала демо периода
      required:
        - error_type
        - detail
    ArgusObject:
      type: object
      properties:
        id:
          type: string
          example: k4jf3kelkrjffle53934d434
        name:
          type: string
          example: Раздел
        class_id:
          type: integer
          example: 10104
        state_id:
          type: integer
          example: 10004
        state:
          type: string
          example: Снят. Норма.
        state_type:
          type: string
          example: NORMAL
        description:
          type: string
          example: Комната 1
    InvalidPrimaryKey:
      type: object
      properties:
        detail:
          type: string
          example: Invalid Primary Key!
        error_type:
          type: string
          example: INVALID_PRIMARY_KEY
    ArgusObjectNotExist:
      type: object
      properties:
        detail:
          type: string
          example: Argus object not exist!
        error_type:
          type: string
          example: ARGUS_OBJECT_NOT_EXIST
    ArgusHttpRequestError:
      type: object
      properties:
        detail:
          type: string
          example: Fail to execute Argus HTTP request
        error_type:
          type: string
          example: ARGUS_HTTP_REQUEST_ERROR
        argus_status_code:
          type: integer
          example: 404
          description: Код ошибки, полученное от сервиса аргуса
        argus_response:
          type: string
          example: пук пук пук
          description: Сообщение об ошибке, полученное от сервиса аргуса
    ArgusAuthorizationError:
      type: object
      properties:
        detail:
          type: string
          example: Fail to authorize in Argus service!
        error_type:
          type: string
          example: ARGUS_AUTHORIZATION_ERROR
    ArgusObjectOperationSerializer:
      type: object
      properties:
        object_id:
          type: string
          example: 658e96f79560b13da4c390sd
        operation:
          type: string
          example: reset_faults
    WrongArgusOperation:
      type: object
      properties:
        error_type:
          type: string
          example: VALIDATION_ERROR
        supported_operations:
          type: array
          example:
            - reset_faults
            - retake_security
            - off_security
            - on_security
        detail:
          type: string
          example: Wrong segment operation!
    ValidationError:
      type: object
      properties:
        detail:
          type: string
          example: Validation Error
    UserPermissionError:
      type: object
      properties:
        detail:
          type: string
          example: Not enough permissions
    NotFound:
      type: object
      properties:
        detail:
          type: string
          example: Not found
    BuildingSchema:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        residence_id:
          type: integer
      required:
        - id
        - title
        - residence_id
    CreateBuildingSchema:
      type: object
      properties:
        title:
          type: string
        residence_id:
          type: integer
      required:
        - title
        - residence_id
    WrongRequestBody:
      type: object
      properties:
        error_type:
          type: string
          example: VALIDATION_ERROR
          nullable: false
        detail:
          type: string
          example: Неверное тело запроса!
          nullable: false
      required:
        - error_type
        - detail
    EntityAlreadyExists:
      type: object
      properties:
        detail:
          type: string
          example: Entity already exists!
    SupportRequestSchema:
      type: object
      properties:
        subject:
          type: string
          example: Приложение вылетает или работает неправильно
        message:
          type: string
          example: Говно ваш симпл хоум, а не умный дом!
        apartment_id:
          type: integer
          example: 1
        email:
          type: string
          example: angry_customer@email.com
        app_version:
          type: string
          example: simplehome v 2.20.1
        device_brand:
          type: string
          example: Apple
        device_model:
          type: string
          example: SE (2-nd generation)
        device_operational_system:
          type: string
          example: IOS
        device_operational_system_version:
          type: string
          example: 16.7
        is_anonymous:
          type: boolean
          example: false
        is_response_required:
          type: boolean
          example: true
    UnknownSubject:
      type: object
      properties:
        detail:
          type: string
          example: Subject "Kekus Pekus" Is Unknown!
    RetrieveWeather:
      type: object
      properties:
        id:
          type: integer
          example: 228
        temperature:
          type: number
          example: -5
        condition_text:
          type: string
          example: Blowing snow
        condition_icon:
          type: string
          example: //cdn.weatherapi.com/weather/64x64/day/227.png
        condition_code:
          type: integer
          example: 1114
        wind_speed:
          type: number
          example: 29.9
        wind_direction:
          type: string
          example: 'N'
        pressure:
          type: number
          example: 1007
        humidity:
          type: number
          example: 68
        city:
          type: string
          example: Санкт-Петербург
    AccountApartmentRequired:
      type: object
      properties:
        detail:
          type: string
          example: Account Apartment is Required!
    AccountApartmentNotFound:
      type: object
      properties:
        detail:
          type: string
          example: Account Apartment Not Found
    WeatherNotFound:
      type: object
      properties:
        detail:
          type: string
          example: Weather Not Found
    ImageSchema:
      type: object
      properties:
        id:
          type: integer
        url:
          type: string
          example: api/v2/images/hash/7aead86346e6a96620ff0b8c4661d2da
        file_path:
          type: string
          example: /images/account_residence_ordering/3/7aead86346e6a96620ff0b8c4661d2da.jpg
        hash:
          type: string
          example: 7aead86346e6a96620ff0b8c4661d2da
        residence_id:
          type: integer
        updated_at:
          type: string
          example: '2021-05-05T05:32:34.598281+00:00'
      required:
        - id
        - url
        - file_path
        - hash
        - updated_at
    IdMustBeAnInteger:
      type: object
      properties:
        detail:
          type: string
          example: Id Must Be An Integer!
    InvalidImageHash:
      type: object
      properties:
        detail:
          type: string
          example: Invalid Image Hash!
    InvalidToken:
      type: object
      properties:
        detail:
          type: string
          example: Invalid Token!
    IntermediateTokenExpired:
      type: object
      properties:
        detail:
          type: string
          example: Intermediate Token Expired!
    ImageNotFound:
      type: object
      properties:
        detail:
          type: string
          example: Image Not Found!
    ImageUpdateSchema:
      type: object
      properties:
        url:
          type: string
          example: api/v2/images/hash/7aead86346e6a96620ff0b8c4661d2da
      required:
        - url
    FileServiceResourcesList:
      type: object
      properties:
        items:
          type: array
          items:
            type: object
            properties:
              path:
                type: string
                example: /images/residences/1/3dda8598a9c2805ff0d73ec58bbcbe0a.png
              name:
                type: string
                example: 3dda8598a9c2805ff0d73ec58bbcbe0a.png
              size:
                type: integer
                example: 316000
              extension:
                type: string
                example: .png
              modified:
                type: string
                example: '2021-05-17T05:56:24Z'
              mode:
                type: integer
                example: 493
              isDir:
                type: boolean
                example: false
              isSymlink:
                type: boolean
                example: false
              type:
                type: string
                example: image
              hash:
                type: string
                example: 3dda8598a9c2805ff0d73ec58bbcbe0a
              api_url:
                type: string
                example: /api/v2/images/hash/3dda8598a9c2805ff0d73ec58bbcbe0a
            required:
              - path
              - name
              - size
              - extension
              - modified
              - mode
              - isDir
              - isSymlink
              - type
    UserNotification:
      type: object
      properties:
        id:
          type: integer
        account_id:
          type: integer
        is_read:
          type: boolean
        type:
          type: string
        notification_id:
          type: integer
        updated_at:
          type: string
      required:
        - account_id
        - type
        - is_read
    LocalizedNotificationWithUserNotification:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        body:
          type: string
        type:
          type: string
        apartment_id:
          type: integer
        send_date:
          type: string
        extra:
          type: string
          example: {}
        created_at:
          type: string
        updated_at:
          type: string
        device_type:
          type: string
        device_subtype:
          type: string
        user_notifications:
          $ref: '#/components/schemas/UserNotification'
    CreateNotivication:
      type: object
      properties:
        title:
          type: string
        body:
          type: string
        title_eng:
          type: string
        body_eng:
          type: string
        account_ids:
          type: array
          items:
            type: integer
        send_date:
          type: string
      required:
        - title
        - body
        - title_eng
        - body_eng
        - send_date
    listOfIds:
      type: object
      properties:
        id:
          type: array
          example:
            - 1
            - 2
            - 3
    LocalizedNotificationResponse:
      type: object
      properties:
        id:
          type: integer
        account_id:
          type: integer
        is_read:
          type: boolean
        type:
          type: string
        notification_id:
          type: integer
        updated_at:
          type: string
        title:
          type: string
        body:
          type: string
        notification_type:
          type: string
        apartment_id:
          type: integer
        apartment_number:
          type: string
        send_date:
          type: string
        extra:
          type: string
          example: {}
        created_at:
          type: string
        device_type:
          type: string
        device_subtype:
          type: string
    schemas-ValidationError:
      type: object
      properties:
        detail:
          type: string
          example: apartment_id Must Be An Integer!
    NotificationNotFound:
      type: object
      properties:
        detail:
          type: string
          example: Notification Not Found!
    UserUpdateNotivication:
      type: object
      properties:
        is_read:
          type: boolean
        account_id:
          type: integer
        notification_id:
          type: integer
      required:
        - notification_id
        - account_id
        - is_read
    RetrieveAutomationsSchema:
      type: object
      properties:
        id:
          type: integer
        is_active:
          type: boolean
        apartment_id:
          type: integer
        extra:
          type: string
          description: json
        creator_id:
          type: integer
        updated_at:
          type: string
        created_at:
          type: string
        residence_id:
          type: integer
        title:
          type: string
        icon_tag:
          type: string
        time_offset:
          type: integer
        actions:
          type: array
        triggers:
          type: array
    CreateAutomationsSchema:
      type: object
      properties:
        is_active:
          type: boolean
        apartment_id:
          type: integer
        extra:
          type: string
          example: {}
        residence_id:
          type: integer
        title:
          type: string
        icon_tag:
          type: string
          example: toy
        time_offset:
          type: integer
    AutomationNotFound:
      type: object
      properties:
        detail:
          type: string
          example: Automation Not Found!
    RetrieveAutomationTrigger:
      type: object
      required:
        - automation_id
        - type
      properties:
        automation_id:
          type: integer
        type:
          type: string
          example: time
        time_condition:
          type: string
          example: '2021-05-27 12:55:54.940827+00:00'
        repeat_condition:
          type: string
        is_repeatable:
          type: boolean
        event_condition:
          type: string
        event_address:
          type: string
        event_capability_id:
          type: integer
        extra:
          type: string
          example: {}
        created_at:
          type: string
          example: '2023-11-28T08:01:22.713972+00:00'
        updated_at:
          type: string
          example: '2023-11-28T08:01:22.713972+00:00'
    CreateAutomationTrigger:
      type: object
      required:
        - automation_id
        - type
      properties:
        automation_id:
          type: integer
        type:
          type: string
          example: time
        time_condition:
          type: string
          example: '2021-05-27 12:55:54.940827+00:00'
        repeat_condition:
          type: string
        is_repeatable:
          type: boolean
        event_condition:
          type: string
        event_address:
          type: string
        event_capability_id:
          type: integer
        extra:
          type: string
          example: {}
    schemas-AutomationNotFound:
      type: object
      properties:
        detail:
          type: string
          example: Automation with id {automation_id} not found
    RetrieveAutomationTriggerWithResidenceId:
      type: object
      required:
        - automation_id
        - type
      properties:
        automation_id:
          type: integer
        type:
          type: string
          example: time
        time_condition:
          type: string
          example: '2021-05-27 12:55:54.940827+00:00'
        repeat_condition:
          type: string
        is_repeatable:
          type: boolean
        event_condition:
          type: string
        event_address:
          type: string
        event_capability_id:
          type: integer
        extra:
          type: string
          example: {}
        residence_id:
          type: integer
          example: 1
        created_at:
          type: string
          example: '2023-11-28T08:01:22.713972+00:00'
        updated_at:
          type: string
          example: '2023-11-28T08:01:22.713972+00:00'
    RetrieveAutomationAction:
      type: object
      properties:
        automation_id:
          type: integer
        type:
          type: string
        extra:
          type: string
        capability_id:
          type: integer
        scenario_id:
          type: integer
        value:
          type: string
        notification_text:
          type: string
        notification_recipients:
          type: array
          example: null
        created_at:
          type: string
          example: '2023-11-28T08:01:22.713972+00:00'
        updated_at:
          type: string
          example: '2023-11-28T08:01:22.713972+00:00'
        apartment_id:
          type: integer
    CreateAutomationAction:
      type: object
      properties:
        automation_id:
          type: integer
        type:
          type: string
        extra:
          type: string
        capability_id:
          type: integer
        scenario_id:
          type: integer
        value:
          type: string
        notification_text:
          type: string
        notification_recipients:
          type: array
    RetrieveApartmentTemplate:
      type: object
      properties:
        id:
          type: integer
        controller_ip:
          type: string
          nullable: true
        controller_port:
          type: integer
        residence_id:
          type: integer
          nullable: true
        title:
          type: string
        created_at:
          type: string
        updated_at:
          type: string
        created_user_id:
          type: integer
        last_updated_user_id:
          type: integer
        is_dhcp:
          type: boolean
      required:
        - id
        - controller_port
        - title
        - created_at
        - updated_at
        - created_user_id
        - last_updated_user_id
        - is_dhcp
    CreateApartmentTemplate:
      type: object
      properties:
        id:
          type: integer
        controller_ip:
          type: string
        controller_port:
          type: integer
        residence_id:
          type: integer
        title:
          type: string
        is_dhcp:
          type: boolean
      required:
        - controller_port
        - is_dhcp
        - title
    controllerIpValidationError:
      type: object
      properties:
        detail:
          type: string
          example: controller_ip required if is_dhcp is false
    ResidenceMustBeInteger:
      type: object
      properties:
        detail:
          type: string
          example: residence_id Must Be An Integer!
    ResidenceMustNotBeNone:
      type: object
      properties:
        detail:
          type: string
          example: residence_id Must Not Be None!
    ApartmentTemplateUpdateController:
      type: object
      properties:
        controller_ip:
          type: string
        is_dhcp:
          type: boolean
        controller_port:
          type: integer
      required:
        - is_dhcp
        - controller_port
    ApartmentTemplateUpdateApartment:
      type: object
      properties:
        residence_id:
          type: integer
        title:
          type: string
      required:
        - title
    RetrieveRoomTemplate:
      type: object
      properties:
        id:
          type: integer
        apartment_template_id:
          type: integer
        title:
          type: string
        finishing_type:
          type: string
        image_id:
          type: integer
      required:
        - id
        - apartment_template_id
        - title
    CreateRoomTemplate:
      type: object
      properties:
        apartment_template_id:
          type: integer
        title:
          type: string
        finishing_type:
          type: string
        image_id:
          type: integer
      required:
        - apartment_template_id
        - title
    payloadValidationError:
      type: object
      properties:
        detail:
          type: string
          example: Payload Type Must Be List Or Dict, Not {type(data)}
    ApartmentTemplatesNotFound:
      type: object
      properties:
        detail:
          type: string
          example: ApartmentTemplates With id {apartment_template_id} Not Found!
    ListRooms:
      type: object
      properties:
        id:
          type: integer
          example: 1
        title:
          type: string
          example: Уборная Олега Тинькова
        image_id:
          type: integer
          example: 777
        apartment_id:
          type: integer
          example: 13
        created_at:
          type: string
          example: '2020-11-26T17:04:17.558199+00:00'
          format: date-time
        updated_at:
          type: string
          example: '2024-04-17T06:09:31.352373+00:00'
          format: date-time
        residence_id:
          type: integer
          example: 14
    CreateRoom:
      type: object
      properties:
        title:
          type: string
          example: Гостинна Олега Тинькова
          required: true
        apartment_id:
          type: integer
          example: 777
          required: true
        residence_id:
          type: integer
          example: 13
        image_id:
          type: integer
          example: 65
    RoomScenarioAction:
      type: object
      properties:
        id:
          type: integer
          example: 11422
        scenario_id:
          type: integer
          example: 1630
        capability_id:
          type: integer
          example: 1409
        value:
          type: string
          example: '58'
        residence_id:
          type: integer
          example: 1
        updated_at:
          type: string
          example: '2022-03-29T09:35:39.262607+00:00'
          format: date-time
        created_at:
          type: string
          example: '2022-03-29T09:35:39.262609+00:00'
          format: date-time
        driver_id:
          type: integer
          example: 2
        address:
          type: string
          example: /devices/gr27_light/controls/value/on
    RoomDevicesCapabilities:
      type: object
      properties:
        id:
          type: integer
          example: 449
        device_id:
          type: integer
          example: 305
        type:
          type: string
          example: toggle
        min_value:
          type: integer
          example: 0
        max_value:
          type: integer
          example: 1
        address:
          type: string
          example: /devices/master_off_control/controls/master_OFF/on
        residence_id:
          type: integer
          example: 1
        extra:
          type: object
          example: null
        sort_order:
          type: string
          example: null
        feedback_address:
          type: string
          example: null
        unit:
          type: string
          example: null
        updated_at:
          type: string
          example: '2021-09-06T11:16:02.218641+00:00'
          format: date-time
        function:
          type: string
          example: null
        push_enabled:
          type: string
          example: always
        is_required:
          type: boolean
          example: false
        driver:
          type: string
          example: mqtt
        ip:
          type: string
          example: 192.168.88.74
        port:
          type: integer
          example: 1888
    RoomDevice:
      type: object
      properties:
        id:
          type: integer
          example: 305
        name:
          type: string
          example: Супер датчик протечки
        type:
          type: string
          example: global
        subtype:
          type: string
          example: trigger
        driver_id:
          type: integer
          example: 2
        description:
          type: string
          example: 1
        room_id:
          type: integer
          example: 482
        created_at:
          type: string
          example: '2021-05-11T09:58:26.178004+00:00'
          format: date-time
        updated_at:
          type: string
          example: '2024-03-21T09:47:15.746945+00:00'
          format: date-time
        icon_tag:
          type: string
          example: water_sensor
        residence_id:
          type: integer
          example: 1
        extra:
          type: object
          example:
            mode: scenario
        room_title:
          type: string
          example: Postman wireless
        driver_type:
          type: string
          example: mqtt
        driver_extra:
          type: object
          example: null
        destination:
          type: string
          example: 192.168.88.74:1883
        capabilities:
          type: array
          items:
            $ref: '#/components/schemas/RoomDevicesCapabilities'
    RoomRolesModel:
      type: object
      properties:
        id:
          type: integer
        account_apartment_id:
          type: integer
        room_id:
          type: integer
        residence_id:
          type: integer
        updated_at:
          type: string
          format: date-time
    RetrieveDriverTemplates:
      type: object
      properties:
        id:
          type: integer
        apartment_template_id:
          type: integer
        ip:
          type: string
        port:
          type: integer
        type:
          type: string
        extra:
          type: string
          example: {}
          nullable: true
      required:
        - apartment_template_id
        - ip
        - port
        - type
        - id
    CreateDriverTemplates:
      type: object
      properties:
        apartment_template_id:
          type: integer
        ip:
          type: string
        port:
          type: integer
        type:
          type: string
        extra:
          type: string
          example: {}
      required:
        - apartment_template_id
        - ip
        - port
        - type
    RetrieveCapabilitiesTemplates:
      type: object
      properties:
        id:
          type: integer
        device_template_id:
          type: integer
        apartment_template_id:
          type: integer
        type:
          type: string
        min_value:
          type: integer
          nullable: true
        max_value:
          type: integer
          nullable: true
        address:
          type: string
          nullable: true
        feedback_address:
          type: string
          nullable: true
        unit:
          type: string
          nullable: true
        extra:
          type: string
          example: {}
          nullable: true
        function:
          type: string
          nullable: true
        push_enabled:
          type: string
          nullable: true
      required:
        - device_template_id
        - apartment_template_id
        - type
        - id
    ListDeviceTemplates:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        type:
          type: string
        subtype:
          type: string
        driver_template_id:
          type: integer
          nullable: true
        apartment_template_id:
          type: integer
        description:
          type: string
        room_template_id:
          type: integer
          nullable: true
        icon_tag:
          type: string
          nullable: true
        extra:
          type: string
          example: {}
          nullable: true
        capabilities:
          type: array
          items:
            $ref: '#/components/schemas/RetrieveCapabilitiesTemplates'
      required:
        - id
        - name
        - type
        - subtype
        - apartment_template_id
    subtypeValidationError:
      type: object
      properties:
        detail:
          type: string
          example: Filter 'type' required when using filter 'subtype'
    CreateDeviceTemplates:
      type: object
      properties:
        name:
          type: string
        type:
          type: string
        subtype:
          type: string
        driver_template_id:
          type: integer
        apartment_template_id:
          type: integer
        description:
          type: string
        room_template_id:
          type: integer
        icon_tag:
          type: string
        extra:
          type: string
          example: {}
      required:
        - name
        - type
        - subtype
        - driver_template_id
        - apartment_template_id
    RetrieveDeviceTemplates:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        type:
          type: string
        subtype:
          type: string
        driver_template_id:
          type: integer
          nullable: true
        apartment_template_id:
          type: integer
        description:
          type: string
        room_template_id:
          type: integer
          nullable: true
        icon_tag:
          type: string
          nullable: true
        extra:
          type: string
          example: {}
          nullable: true
      required:
        - id
        - name
        - type
        - subtype
        - apartment_template_id
    failToFind:
      type: object
      properties:
        detail:
          type: string
          example: Fail To Find {error_message}
    CreateCapabilitiesTemplates:
      type: object
      properties:
        device_template_id:
          type: integer
        apartment_template_id:
          type: integer
        type:
          type: string
        min_value:
          type: integer
        max_value:
          type: integer
        address:
          type: string
        feedback_address:
          type: string
        unit:
          type: string
        extra:
          type: string
          example: {}
        function:
          type: string
        push_enabled:
          type: string
      required:
        - device_template_id
        - apartment_template_id
        - type
    ScenarioTemplateWithActions:
      type: object
      properties:
        id:
          type: integer
          example: 217
        apartment_template_id:
          type: integer
          example: 142
        title:
          type: string
          example: Ddd
        trigger_type:
          type: string
          example: auto
        icon_tag:
          type: string
          example: day
        room_template_id:
          type: integer
          example: 194
        actions:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
                example: 558
              scenario_template_id:
                type: integer
                example: 217
              capability_template_id:
                type: integer
                example: 1296
              apartment_template_id:
                type: integer
                example: 142
              value:
                type: string
                example: '1'
              device_template_id:
                type: integer
                example: 535
            required:
              - scenario_template_id
              - capability_template_id
              - apartment_template_id
              - value
              - id
      required:
        - title
        - trigger_type
        - apartment_template_id
        - id
    CreateScenarioTemplate:
      type: object
      properties:
        title:
          type: string
        trigger_type:
          type: string
        icon_tag:
          type: string
        apartment_template_id:
          type: integer
        room_template_id:
          type: integer
      required:
        - title
        - trigger_type
        - apartment_template_id
    RetrieveScenarioTemplate:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        trigger_type:
          type: string
        icon_tag:
          type: string
          nullable: true
        apartment_template_id:
          type: integer
        room_template_id:
          type: integer
          nullable: true
      required:
        - title
        - trigger_type
        - apartment_template_id
        - id
    ScenarioTemplateWithDeviceId:
      type: object
      required:
        - id
        - apartment_template_id
        - scenario_template_id
        - value
        - device_template_id
        - capability_template_id
      properties:
        id:
          type: integer
        scenario_template_id:
          type: integer
        capability_template_id:
          type: integer
        apartment_template_id:
          type: integer
        value:
          type: string
        device_template_id:
          type: integer
    CreateActionTemplate:
      type: object
      properties:
        scenario_template_id:
          type: integer
        capability_template_id:
          type: integer
        apartment_template_id:
          type: integer
        value:
          type: string
      required:
        - scenario_template_id
        - capability_template_id
        - apartment_template_id
        - value
    RetrieveActionTemplate:
      type: object
      properties:
        id:
          type: integer
        scenario_template_id:
          type: integer
        capability_template_id:
          type: integer
        apartment_template_id:
          type: integer
        value:
          type: string
      required:
        - scenario_template_id
        - capability_template_id
        - apartment_template_id
        - value
        - id
    RetrieveResidence:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        address:
          type: string
        city:
          type: string
        description:
          type: string
          nullable: true
        created_at:
          type: string
          format: date-time
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true
        image_id:
          type: integer
          nullable: true
        integrator_id:
          type: integer
          nullable: true
        customer_support_email:
          type: string
          nullable: true
      required:
        - id
        - title
        - address
        - city
        - description
        - created_at
        - updated_at
        - image_id
        - integrator_id
        - customer_support_email
    UpdateResidence:
      type: object
      properties:
        title:
          type: string
        address:
          type: string
        description:
          type: string
          nullable: true
        updated_at:
          type: string
          format: date-time
          nullable: true
        image_id:
          type: integer
          nullable: true
        integrator_id:
          type: integer
          nullable: true
        customer_support_email:
          type: string
          nullable: true
        city:
          type: string
      required:
        - title
        - address
        - image_id
        - integrator_id
        - city
    CreateResidence:
      type: object
      required:
        - title
        - address
        - city
        - image_id
        - integrator_id
        - city
        - description
      properties:
        title:
          type: string
        address:
          type: string
        description:
          type: string
          nullable: true
        image_id:
          type: integer
          nullable: true
        integrator_id:
          type: integer
          nullable: true
        city:
          type: string
    RetrieveApartments:
      type: object
      properties:
        id:
          type: integer
        apartment_number:
          type: integer
        residence_id:
          type: integer
        residence_title:
          type: string
        type_label:
          type: string
        type_label_eng:
          type: string
      required:
        - id
        - apartment_number
        - residence_id
        - residence_title
        - type_label
        - type_label_eng
    RetrieveResidenceWithApartments:
      type: object
      allOf:
        - $ref: '#/components/schemas/RetrieveResidence'
      properties:
        apartments:
          type: array
          items:
            $ref: '#/components/schemas/RetrieveApartments'
    ChangeResidenceAccess:
      type: object
      required:
        - residences_ids
      properties:
        residences_ids:
          description: список id резиденций, доступ до которых будет изменён
          type: array
          items:
            type: integer
    RetrieveIntegrator:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
      required:
        - id
        - title
    AccountApartmentListDisplayPreferences:
      type: object
      properties:
        id:
          type: integer
        account_id:
          type: integer
        updated_at:
          type: string
          format: date-time
          example: '2022-02-14T11:59:37.945Z'
        preferences:
          type: object
    AccountApartmentPreferencesModel:
      type: object
      properties:
        id:
          type: integer
        account_id:
          type: integer
        apartment_id:
          type: integer
        updated_at:
          type: string
          format: date-time
        preferences:
          type: object
    AccountApartmentPreferences:
      type: object
      properties:
        group_order:
          type: array
          items:
            type: object
        global_scenarios:
          type: array
          items:
            type: object
        global_security_order:
          type: array
          items:
            type: string
            enum:
              - leakage
              - door
              - cleaning_mod
        room_groups:
          type: array
          items:
            type: object
            properties:
              id:
                type: string
              title:
                type: string
        rooms:
          type: array
          items:
            type: object
    AccountApartmentDefaultPreferencesModel:
      type: object
      properties:
        id:
          type: integer
        apartment_id:
          type: integer
        updated_at:
          type: string
          format: date-time
        preferences:
          type: object
    Accounts:
      type: object
      properties:
        id:
          type: integer
        first_name:
          type: string
        last_name:
          type: string
        middle_name:
          type: string
        is_owner:
          type: boolean
        account_apartment_id:
          type: integer
        email:
          type: string
        phone_number:
          type: string
        image_id:
          type: integer
        language:
          type: string
    RetrieveController:
      type: object
      properties:
        id:
          type: integer
          example: 1
        serial_number:
          type: string
          example: '123'
        uid:
          type: string
          example: wirenboard-AVP3C5Z5
        ip:
          type: string
          example: 192.168.0.72
        port:
          type: integer
          example: 5000
        apartment_id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: '2020-11-26T17:04:17.798601+00:00'
        updated_at:
          type: string
          format: date-time
          example: '2021-09-01T13:26:40.970440+00:00'
        residence_id:
          type: integer
          example: 1
        extra:
          type: object
        is_registered:
          type: boolean
        is_dhcp:
          type: boolean
    ApartmentRooms:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        image_id:
          type: integer
        apartment_id:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        residence_id:
          type: integer
    ScenariosActions:
      type: object
      properties:
        id:
          type: integer
          example: 11422
        scenario_id:
          type: integer
          example: 1630
        capability_id:
          type: integer
          example: 1409
        value:
          type: string
          example: '58'
        residence_id:
          type: integer
          example: 1
        updated_at:
          type: string
          example: '2022-03-29T09:35:39.262607+00:00'
          format: date-time
        created_at:
          type: string
          example: '2022-03-29T09:35:39.262609+00:00'
          format: date-time
        driver_id:
          type: integer
          example: 2
        extra:
          type: object
          example: null
        address:
          type: string
          example: /devices/gr27_light/controls/value/on
        feedback_address:
          type: string
          example: /devices/gr27_light/controls/value_fb
        name:
          type: string
          example: Точки
        type:
          type: string
          example: light
        subtype:
          type: string
          example: dimmable
        device_id:
          type: integer
          example: 913
        capability_type:
          type: string
          example: brightness
        room_id:
          type: integer
          example: 484
        title:
          type: string
          example: Спальня
        capability_extra:
          type: object
          example: null
    ApartmentsScenarioWithActions:
      type: object
      properties:
        id:
          type: integer
          example: 1630
        title:
          type: string
          example: Отдых
        trigger_type:
          type: string
          example: auto
        icon_tag:
          type: string
          example: photo
        uid:
          type: string
          example: wirenboard-AMRRKXLM
        apartment_id:
          type: integer
          example: 1
        room_id:
          type: integer
          example: 1
        is_confirmation_required:
          type: boolean
          example: null
        description:
          type: string
          example: description
        created_at:
          type: string
          example: '2022-01-25T14:01:33.570737+00:00'
          format: date-time
        updated_at:
          type: string
          example: '2022-03-29T09:35:39.355854+00:00'
          format: date-time
        actions:
          type: array
          items:
            $ref: '#/components/schemas/ScenariosActions'
    ApartmentDevices:
      type: object
      properties:
        id:
          type: integer
          example: 305
        name:
          type: string
          example: Супер датчик протечки
        type:
          type: string
          example: global
        subtype:
          type: string
          example: trigger
        driver_id:
          type: integer
          example: 2
        description:
          type: string
          example: 1
        room_id:
          type: integer
          example: 482
        created_at:
          type: string
          example: '2021-05-11T09:58:26.178004+00:00'
          format: date-time
        updated_at:
          type: string
          example: '2024-03-21T09:47:15.746945+00:00'
          format: date-time
        icon_tag:
          type: string
          example: water_sensor
        residence_id:
          type: integer
          example: 1
        extra:
          type: object
          example:
            mode: scenario
        capability_id:
          type: integer
          example: 449
        device_id:
          type: integer
          example: 305
        capability_type:
          type: string
          example: toggle
        min_value:
          type: integer
          example: 0
        max_value:
          type: integer
          example: 1
        address:
          type: string
          example: /devices/master_off_control/controls/master_OFF/on
        capability_residence_id:
          type: integer
          example: 1
        capability_extra:
          type: object
          example: null
        feedback_address:
          type: string
          example: null
        unit:
          type: string
          example: null
        capability_updated_at:
          type: string
          example: '2021-09-06T11:16:02.218641+00:00'
        function:
          type: string
          example: null
        push_enabled:
          type: string
          example: always
        is_required:
          type: boolean
          example: false
        capability_sort_order:
          type: string
          example: null
        driver_type:
          type: string
          example: mqtt
        driver_port:
          type: integer
          example: 1883
        driver_ip:
          type: string
          example: 192.168.88.74
        room_title:
          type: string
          example: Postman 1080p
    RetrieveDriver:
      type: object
      properties:
        id:
          type: integer
          example: 1
        ip:
          type: string
          example: 192.168.0.74
        port:
          type: integer
          example: 1883
        type:
          type: string
          example: mqtt
        controller_id:
          type: integer
          example: 1
        created_at:
          type: string
          format: date-time
          example: '2021-02-01T13:43:38.838000+00:00'
        updated_at:
          type: string
          format: date-time
          example: '2021-02-01T13:43:39.549000+00:00'
        residence_id:
          type: integer
          example: 1
        extra:
          type: object
    ApartmentCapabilities:
      type: object
      properties:
        address:
          type: string
          example: авы
        feedback_address:
          type: string
          example: выф
        id:
          type: integer
          example: 11115
        uid:
          type: string
          example: wirenboard-AMRRKXLM
        type:
          type: string
          example: mqtt
        port:
          type: integer
          example: 1883
        ip:
          type: string
          example: 192.168.88.74
        function:
          type: string
          example: null
    UpdateApartment:
      type: object
      required:
        - apartment_number
        - floor_number
        - residence_id
        - apartment_type_id
      properties:
        apartment_number:
          type: string
          maxLength: 128
        floor_number:
          type: integer
        residence_id:
          type: integer
        building_id:
          type: integer
        comment:
          type: string
          maxLength: 1024
        apartment_type_id:
          type: integer
    ApartmentWithAccounts:
      type: object
      properties:
        id:
          type: integer
        apartment_number:
          type: string
        residence_id:
          type: integer
        residence_title:
          type: string
        type_label:
          type: string
        type_label_eng:
          type: string
        apartment_type_id:
          type: integer
        floor_number:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        building_id:
          type: integer
          nullable: true
        comment:
          type: string
          nullable: true
        accounts:
          type: array
          items:
            $ref: '#/components/schemas/Accounts'
        demo_access:
          $ref: '#/components/schemas/RetrieveDemoAccess'
          nullable: true
      required:
        - id
        - residence_id
        - apartment_number
        - type_label
        - type_label_eng
        - apartment_type_id
        - floor_number
        - building_id
        - created_at
        - updated_at
        - comment
        - accounts
        - residence_title
        - demo_access
    CreateApartment:
      type: object
      required:
        - apartment_number
        - floor_number
        - residence_id
        - apartment_type_id
      properties:
        apartment_number:
          type: string
          maxLength: 128
        floor_number:
          type: integer
        residence_id:
          type: integer
        building_id:
          type: integer
        comment:
          type: string
          maxLength: 1024
        apartment_type_id:
          type: integer
        template_id:
          type: integer
          nullable: true
    RetrieveCreatedApartment:
      type: object
      properties:
        id:
          type: integer
        apartment_number:
          description: номер апартоментов
          type: integer
        residence_id:
          type: integer
        floor_number:
          type: integer
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        building_id:
          type: integer
        comment:
          type: string
        apartment_type_id:
          type: integer
    ApartmentSchema:
      type: object
      properties:
        id:
          type: integer
        apartment_number:
          type: string
          nullable: false
        apartment_type_id:
          type: integer
          nullable: false
        floor_number:
          type: integer
          nullable: false
        residence_id:
          type: integer
          nullable: false
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        building_id:
          type: integer
          nullable: true
        comment:
          type: string
          nullable: true
    CloneApartmentSchema:
      type: object
      properties:
        apartment_number:
          type: string
          required: true
          example: Дом Олега Тинькова
          description: Название нового помещения
        floor_number:
          type: integer
          example: 1
          description: Этаж нового помещения
        apartment_type_id:
          type: integer
          description: id типа помещения
        building_id:
          type: integer
          description: id здания
        comment:
          type: string
          description: комментарий
    CreateApartmentFromTemplate:
      type: object
      properties:
        apartment_number:
          type: string
          required: true
        floor_number:
          type: integer
          required: true
        residence_id:
          type: integer
          required: true
        controller_uid:
          type: string
          required: true
        building_id:
          type: integer
          required: false
        controller_serial_number:
          type: string
          required: true
        comment:
          type: string
          required: false
        apartment_type_id:
          type: integer
          required: true
    RetrieveApartmentDublicate1:
      type: object
      properties:
        id:
          type: integer
        apartment_number:
          description: номер апартоментов
          type: integer
        residence_id:
          type: integer
        floor_number:
          type: integer
        created_at:
          type: string
        updated_at:
          type: string
          format: date-time
        building_id:
          type: integer
        comment:
          type: string
    RetrieveUser:
      type: object
      properties:
        id:
          type: integer
        phone_number:
          type: string
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        middle_name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        image_id:
          type: integer
        group_id:
          type: integer
        language:
          type: string
          enum:
            - rus
            - eng
        integrator_id:
          type: integer
    RetrieveUserWithAccountResidence:
      type: object
      properties:
        id:
          type: integer
        phone_number:
          type: string
        email:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        middle_name:
          type: string
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        image_id:
          type: integer
        group_id:
          type: integer
        language:
          type: string
          enum:
            - rus
            - eng
        integrator_id:
          type: integer
        account_residences:
          type: array
          description: список резиденций доступных пользователю
          items:
            $ref: '#/components/schemas/RetrieveResidence'
    SuccessAdminLoginResponse:
      type: object
      properties:
        exp_time:
          type: integer
        refresh_exp_time:
          type: integer
        group_id:
          type: integer
        user_id:
          type: integer
        prefix:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        middle_name:
          type: string
        refresh_token:
          type: string
        token:
          type: string
      required:
        - token
        - refresh_token
        - refresh_exp_time
        - exp_time
        - user_id
        - group_id
    SuccessLoginResponse:
      type: object
      properties:
        status:
          example: OK
        expire:
          description: время жизни смс кода (2 минуты)
          example: 120
        user_id:
          type: integer
          description: id пользователя под которым был произведён вход
    ConfirmCode:
      type: object
      properties:
        prefix:
          type: string
          example: Bearer
        token:
          type: string
        exp_time:
          type: integer
        refresh_token:
          type: string
        refresh_exp_time:
          type: string
        previous_apartment:
          $ref: '#/components/schemas/RetrieveApartmentDublicate1'
        apartmetns:
          type: array
          items:
            $ref: '#/components/schemas/RetrieveApartmentDublicate1'
        user_id:
          type: integer
        language:
          type: string
          enum:
            - en
            - ru
        username:
          type: string
    RetrieveClient:
      type: object
      properties:
        id:
          type: integer
          example: 887
        account_id:
          type: integer
          example: 491
        os:
          type: string
          example: iOS
        os_version:
          type: string
          example: '14.4'
        device_name:
          type: string
          example: iPhone 8
        device_model:
          type: string
          example: iPhone 8
        unique_id:
          type: string
          example: 4C02CCCA-49A7-4207-A81A-F84A8C72849A
        push_token:
          type: string
          example: eun7vXvWuUIMg0Ow7v82ns:APA91bHK8rwcRiBT1SFOyrILQEOS2zbu9J34znI28Dv2k0MGAeXVoK_gCODtjynmpy9f1oJqX3eQbBrr98qe-NEoFYBnIDcO547DlTXN0o21dQ9sTWI3t2nxOmqB4K03Ukm67cBiq8vH
        created_at:
          type: string
          example: '2021-05-06T20:59:00.584597+00:00'
        updated_at:
          type: string
          example: '2021-09-10T09:37:01.756590+00:00'
        last_apartment:
          type: integer
          example: 51
        source:
          type: string
          example: mobile_app
        ip_address:
          type: string
          example: 81.95.25.94
        ip_location_country:
          type: string
          example: Россия
        ip_location_city:
          type: string
          example: Санкт-Петербург
    ClientsCreateSchema:
      type: object
      required:
        - unique_id
      properties:
        email:
          type: string
          minLength: 8
          maxLength: 64
        account_id:
          type: integer
        push_token:
          type: string
          maxLength: 256
        os:
          type: string
          maxLength: 32
        os_version:
          type: string
          maxLength: 32
        device_name:
          type: string
          maxLength: 32
        device_model:
          type: string
          maxLength: 32
        unique_id:
          type: string
          maxLength: 64
        auth_token:
          type: string
          maxLength: 256
        refresh_token:
          type: string
          maxLength: 256
    RetrieveScenario:
      type: object
      required:
        - title
        - trigger_type
        - apartment_id
      properties:
        id:
          type: integer
        title:
          type: string
          maxLength: 128
        trigger_type:
          type: string
          maxLength: 10
          enum:
            - auto
            - date
        icon_tag:
          type: string
          maxLength: 512
        apartment_id:
          type: integer
        room_id:
          type: integer
        residence_id:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
        is_predefined:
          type: boolean
        is_confirmation_required:
          type: boolean
        description:
          type: string
    RetrieveAction:
      type: object
      properties:
        id:
          type: integer
          example: 10518
        scenario_id:
          type: integer
          example: 1
        capability_id:
          type: integer
          example: 1
        value:
          type: string
          maxLength: 12
          example: '1'
        residence_id:
          type: integer
        created_at:
          type: string
          example: '2023-11-28T08:01:22.713972+00:00'
        updated_at:
          type: string
          example: '2023-11-28T08:01:22.713972+00:00'
      required:
        - id
        - scenario_id
        - capability_id
        - value
    RetrieveScenarioWithActions:
      type: object
      allOf:
        - $ref: '#/components/schemas/RetrieveScenario'
      properties:
        actions:
          type: array
          items:
            $ref: '#/components/schemas/RetrieveAction'
    CreateScenario:
      type: object
      properties:
        title:
          type: string
          example: Test5
        trigger_type:
          type: string
          example: auto
        icon_tag:
          type: string
          example: night
        residence_id:
          type: integer
          example: 1
        apartment_id:
          type: integer
          example: 1
        room_id:
          type: integer
          example: 1
        is_confirmation_required:
          type: boolean
          example: true
        description:
          type: string
          example: very
